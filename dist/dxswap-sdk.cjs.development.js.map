{"version":3,"file":"dxswap-sdk.cjs.development.js","sources":["../src/constants.ts","../src/utils.ts","../src/errors.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/routable-platform.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/entities/fractions/priced-token-amount.ts","../src/entities/liquidity-mining-campaign.ts","../src/entities/priced-token.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\nimport PERMISSIVE_MULTICALL_ABI from './abis/PermissiveMulticall.json'\nimport STAKING_REWARDS_FACTORY_ABI from './abis/staking-rewards-distribution-factory.json'\nimport STAKING_REWARDS_DISTRIBUTION_ABI from './abis/staking-rewards-distribution.json'\nimport TOKEN_REGISTRY_ABI from './abis/token-registry.json'\nimport {\n  rinkeby as coreRinkeby,\n  mainnet as coreMainnet,\n  arbitrumTestnetV3 as coreArbitrumTestnetV3,\n  sokol as coreSokol,\n  xdai as coreXDai,\n  matic as coreMatic\n} from 'dxswap-core/.contracts.json'\nimport {\n  rinkeby as peripheryRinkeby,\n  mainnet as peripheryMainnet,\n  arbitrumTestnetV3 as peripheryArbitrumTestnetV3,\n  sokol as peripherySokol,\n  xdai as peripheryXDai,\n  matic as peripheryMatic\n} from 'dxswap-periphery/.contracts.json'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  RINKEBY = 4,\n  ARBITRUM_TESTNET_V3 = 79377087078960,\n  SOKOL = 77,\n  XDAI = 100,\n  MATIC = 137,\n  tAVALANCHE = 43113,\n  tMATIC = 80001,\n  tBINANCE = 97\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\n\nexport const FACTORY_ADDRESS: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: coreMainnet.factory,\n  [ChainId.RINKEBY]: coreRinkeby.factory,\n  [ChainId.ARBITRUM_TESTNET_V3]: coreArbitrumTestnetV3.factory,\n  [ChainId.SOKOL]: coreSokol.factory,\n  [ChainId.XDAI]: coreXDai.factory,\n  [ChainId.MATIC]: coreMatic.factory\n}\n\nexport const ROUTER_ADDRESS: { [chainId in ChainId]?: string } = {\n  [ChainId.RINKEBY]: peripheryRinkeby.router,\n  [ChainId.MAINNET]: peripheryMainnet.router,\n  [ChainId.ARBITRUM_TESTNET_V3]: peripheryArbitrumTestnetV3.router,\n  [ChainId.SOKOL]: peripherySokol.router,\n  [ChainId.XDAI]: peripheryXDai.router,\n  [ChainId.MATIC]: peripheryMatic.router,\n  [ChainId.tAVALANCHE]: peripheryMatic.router,\n  [ChainId.tMATIC]: peripheryMatic.router,\n  [ChainId.tBINANCE]: peripheryMatic.router\n\n}\n\nexport const STAKING_REWARDS_FACTORY_ADDRESS: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: '0x0000000000000000000000000000000000001234',\n  [ChainId.RINKEBY]: '0xDcA39454f0B83c6f0807708b0E6a620dd9BA6808',\n  [ChainId.ARBITRUM_TESTNET_V3]: '0xB95Ad562EDE8DD78BBFC287fA18150e802b09D9F',\n  [ChainId.SOKOL]: '0xD436e756Cf41318ADeC62E8dCbEF2608753Ae068',\n  [ChainId.XDAI]: '0xCD2A45F36464FdB1065160e03A2353996Ea8Ff57',\n  [ChainId.MATIC]: '0x0000000000000000000000000000000000001234',\n  [ChainId.tAVALANCHE]: '0x0000000000000000000000000000000000001234',\n  [ChainId.tMATIC]: '0x0000000000000000000000000000000000001234',\n  [ChainId.tBINANCE]: '0x0000000000000000000000000000000000001234'\n  \n}\n\nexport const TOKEN_REGISTRY_ADDRESS: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: '0x93DB90445B76329e9ed96ECd74e76D8fbf2590d8',\n  [ChainId.RINKEBY]: '0x815d1b18f6baaeb3853b0f637475a5c2b28e2253',\n  [ChainId.ARBITRUM_TESTNET_V3]: '0x9d6f6d86b81289e40e07fcda805c06f6e9b8f629',\n  [ChainId.SOKOL]: '0x681c3836a5589b933062ACA4fd846c1287a2865F',\n  [ChainId.XDAI]: '0x85E001DfFF16F388Bc32Cd18009ceDF8F9b62C9E',\n  [ChainId.MATIC]: '0x0000000000000000000000000000000000001234',\n  [ChainId.tAVALANCHE]: '0x0000000000000000000000000000000000001234',\n  [ChainId.tMATIC]: '0x0000000000000000000000000000000000001234',\n  [ChainId.tBINANCE]: '0x0000000000000000000000000000000000001234'\n  \n}\n\nexport const DXSWAP_TOKEN_LIST_ID: { [chainId: number]: number } = {\n  [ChainId.MAINNET]: 1,\n  [ChainId.RINKEBY]: 1,\n  [ChainId.ARBITRUM_TESTNET_V3]: 1,\n  [ChainId.SOKOL]: 1,\n  [ChainId.XDAI]: 5,\n  [ChainId.MATIC]: 137,\n  [ChainId.tAVALANCHE]: 43113,\n  [ChainId.tMATIC]: 80001,\n  [ChainId.tBINANCE]: 97\n}\n\nexport const INIT_CODE_HASH: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: '0xd306a548755b9295ee49cc729e13ca4a45e00199bbd890fa146da43a50571776', // Swapr\n  [ChainId.RINKEBY]: '0xd306a548755b9295ee49cc729e13ca4a45e00199bbd890fa146da43a50571776', // Swapr\n  [ChainId.ARBITRUM_TESTNET_V3]: '0xd306a548755b9295ee49cc729e13ca4a45e00199bbd890fa146da43a50571776', // Swapr\n  [ChainId.SOKOL]: '0xd306a548755b9295ee49cc729e13ca4a45e00199bbd890fa146da43a50571776', // Swapr\n  [ChainId.XDAI]: '0x3f88503e8580ab941773b59034fb4b2a63e86dbc031b3633a925533ad3ed2b93', // Honeyswap\n  [ChainId.MATIC]: '0xae81bbc68f315fbbf7617eb881349af83b1e95241f616966e1e0583ecd0793fe', // Honeyswap\n  [ChainId.tAVALANCHE]: '0x3f88503e8580ab941773b59034fb4b2a63e86dbc031b3633a925533ad3ed2b93', // Honeyswap\n  [ChainId.tMATIC]: '0x3f88503e8580ab941773b59034fb4b2a63e86dbc031b3633a925533ad3ed2b93', // Honeyswap\n  [ChainId.tBINANCE]: '0x3f88503e8580ab941773b59034fb4b2a63e86dbc031b3633a925533ad3ed2b93' // Honeyswap\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _25 = JSBI.BigInt(25)\nexport const SECONDS_IN_YEAR = JSBI.BigInt(31536000)\nexport const _30 = JSBI.BigInt(30)\nexport const _100 = JSBI.BigInt(100)\nexport const _1000 = JSBI.BigInt(1000)\nexport const _10000 = JSBI.BigInt(10000)\n\nexport const defaultSwapFee = _25\nexport const defaultProtocolFeeDenominator = FIVE\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n\nconst PERMISSIVE_MULTICALL_ADDRESS: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: '0x0946f567d0ed891e6566c1da8e5093517f43571d',\n  [ChainId.RINKEBY]: '0x798d8ced4dff8f054a5153762187e84751a73344',\n  [ChainId.ARBITRUM_TESTNET_V3]: '0x73a08DC74eF4ed2c360199244bb69F1464204E7C',\n  [ChainId.SOKOL]: '0x4D97Bd8eFaCf46b33c4438Ed0B7B6AABfa2359FB',\n  [ChainId.XDAI]: '0x4E75068ED2338fCa56631E740B0723A6dbc1d5CD',\n  [ChainId.MATIC]: '0x95028E5B8a734bb7E2071F96De89BABe75be9C8E',\n  [ChainId.tAVALANCHE]: '0x4E75068ED2338fCa56631E740B0723A6dbc1d5CD',\n  [ChainId.tMATIC]: '0x4E75068ED2338fCa56631E740B0723A6dbc1d5CD',\n  [ChainId.tBINANCE]: '0x4E75068ED2338fCa56631E740B0723A6dbc1d5CD'\n}\n\nexport {\n  PERMISSIVE_MULTICALL_ABI,\n  TOKEN_REGISTRY_ABI,\n  PERMISSIVE_MULTICALL_ADDRESS,\n  STAKING_REWARDS_FACTORY_ABI,\n  STAKING_REWARDS_DISTRIBUTION_ABI\n}\n","import invariant from 'tiny-invariant'\n// import warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    // warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { ChainId, SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on the target chain.\n *\n * The only instances of the base class `Currency` are native currencies such as Ether for Ethereum,\n * SPOA for the Sokol testnet and xDAI for xDAI.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  // fiat currencies used to represent countervalues\n  public static readonly USD: Currency = new Currency(18, 'USD', 'US dollar')\n\n  // Native currencies for deployment chains\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n  public static readonly SPOA: Currency = new Currency(18, 'SPOA', 'Sokol POA')\n  public static readonly XDAI: Currency = new Currency(18, 'XDAI', 'xDAI')\n  public static readonly MATIC: Currency = new Currency(18, 'MATIC', 'MATIC')\n  public static readonly tAVALANCHE: Currency = new Currency(18, 'tAVAX', 'tAVALANCHE')\n  public static readonly tMATIC: Currency = new Currency(18, 'tMATIC', 'tMATIC')\n  public static readonly tBINANCE: Currency = new Currency(18, 'tBNB', 'tBNB')\n\n\n  private static readonly NATIVE_CURRENCY: { [chainId in ChainId]: Currency } = {\n    [ChainId.MAINNET]: Currency.ETHER,\n    [ChainId.RINKEBY]: Currency.ETHER,\n    [ChainId.ARBITRUM_TESTNET_V3]: Currency.ETHER,\n    [ChainId.SOKOL]: Currency.SPOA,\n    [ChainId.XDAI]: Currency.XDAI,\n    [ChainId.MATIC]: Currency.MATIC,\n    [ChainId.tAVALANCHE]: Currency.tAVALANCHE,\n    [ChainId.tMATIC]: Currency.tMATIC,\n    [ChainId.tBINANCE]: Currency.tBINANCE\n\n  }\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  public static isNative(currency: Currency): boolean {\n    return Object.values(Currency.NATIVE_CURRENCY).indexOf(currency) >= 0\n  }\n\n  public static getNative(chainId: ChainId): Currency {\n    return Currency.NATIVE_CURRENCY[chainId]\n  }\n}\n\nexport const USD = Currency.USD\n\nexport const ETHER = Currency.ETHER\nexport const SPOA = Currency.SPOA\nexport const XDAI = Currency.XDAI\nexport const MATIC = Currency.MATIC\nexport const tAVALANCHE = Currency.tAVALANCHE\nexport const tMATIC = Currency.tMATIC\nexport const tBINANCE = Currency.tBINANCE\n\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public static readonly WETH: { [key: number]: Token } = {\n    [ChainId.MAINNET]: new Token(\n      ChainId.MAINNET,\n      '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n      18,\n      'WETH',\n      'Wrapped Ether'\n    ),\n    [ChainId.RINKEBY]: new Token(\n      ChainId.RINKEBY,\n      '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n      18,\n      'WETH',\n      'Wrapped Ether'\n    ),\n    [ChainId.ARBITRUM_TESTNET_V3]: new Token(\n      ChainId.ARBITRUM_TESTNET_V3,\n      '0xf8456e5e6A225C2C1D74D8C9a4cB2B1d5dc1153b',\n      18,\n      'WETH',\n      'Wrapped Ether'\n    ),\n    [ChainId.SOKOL]: new Token(\n      ChainId.SOKOL,\n      '0xfDc50eF6b67F65Dddc36e56729a9D07BAe1A1f68',\n      18,\n      'WETH',\n      'Wrapped Ether'\n    ),\n    [ChainId.XDAI]: new Token(\n      ChainId.XDAI,\n      '0x6a023ccd1ff6f2045c3309768ead9e68f978f6e1',\n      18,\n      'WETH',\n      'Wrapped Ether on xDai'\n    ),\n    [ChainId.MATIC]: new Token(\n      ChainId.MATIC,\n      '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n      18,\n      'WETH',\n      'Wrapped Ether on Matic'\n    ),\n    [ChainId.tAVALANCHE]: new Token(\n      ChainId.tAVALANCHE,\n      '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n      18,\n      'WETH',\n      'Wrapped Ether on tAvalanche'\n    ),\n    [ChainId.tMATIC]: new Token(\n      ChainId.tMATIC,\n      '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n      18,\n      'WETH',\n      'Wrapped Ether on tMatic'\n    ),\n    [ChainId.tBINANCE]: new Token(\n      ChainId.tBINANCE,\n      '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n      18,\n      'WETH',\n      'Wrapped Ether on tBSC'\n    )\n  }\n\n  public static readonly WSPOA: { [key: number]: Token } = {\n    [ChainId.SOKOL]: new Token(ChainId.SOKOL, '0xc655c6D80ac92d75fBF4F40e95280aEb855B1E87', 18, 'WSPOA', 'Wrapped SPOA')\n  }\n\n  public static readonly WXDAI: { [key: number]: Token } = {\n    [ChainId.XDAI]: new Token(ChainId.XDAI, '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d', 18, 'WXDAI', 'Wrapped xDAI')\n  }\n\n  public static readonly WMATIC: { [key: number]: Token } = {\n    [ChainId.MATIC]: new Token(ChainId.MATIC, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped Matic')\n  }\n\n  public static readonly DXD: { [key: number]: Token } = {\n    [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0xa1d65E8fB6e87b60FECCBc582F7f97804B725521', 18, 'DXD', 'DXdao'),\n    [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, '0x554898A0BF98aB0C03ff86C7DccBE29269cc4d29', 18, 'DXD', 'DXdao'),\n    [ChainId.XDAI]: new Token(\n      ChainId.XDAI,\n      '0xb90d6bec20993be5d72a5ab353343f7a0281f158',\n      18,\n      'DXD',\n      'DXdao from Ethereum'\n    )\n  }\n\n  public static readonly tWAVALANCHE: { [key: number]: Token } = {\n    [ChainId.tAVALANCHE]: new Token(ChainId.tAVALANCHE, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'tWAVAX', 'Wrapped tAvalanche')\n  }\n\n  public static readonly tWMATIC: { [key: number]: Token } = {\n    [ChainId.tMATIC]: new Token(ChainId.tMATIC, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'tWMATIC', 'Wrapped tMatic')\n  }\n\n  public static readonly tWBINANCE: { [key: number]: Token } = {\n    [ChainId.tBINANCE]: new Token(ChainId.tBINANCE, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'tWBNB', 'Wrapped tBNB')\n  }\n\n  private static readonly NATIVE_CURRENCY_WRAPPER: { [chainId in ChainId]: Token } = {\n    [ChainId.MAINNET]: Token.WETH[ChainId.MAINNET],\n    [ChainId.RINKEBY]: Token.WETH[ChainId.RINKEBY],\n    [ChainId.ARBITRUM_TESTNET_V3]: Token.WETH[ChainId.ARBITRUM_TESTNET_V3],\n    [ChainId.SOKOL]: Token.WSPOA[ChainId.SOKOL],\n    [ChainId.XDAI]: Token.WXDAI[ChainId.XDAI],\n    [ChainId.MATIC]: Token.WMATIC[ChainId.MATIC],\n\n    [ChainId.tAVALANCHE]: Token.tWAVALANCHE[ChainId.tAVALANCHE],\n    [ChainId.tMATIC]: Token.tWMATIC[ChainId.tMATIC],\n    [ChainId.tBINANCE]: Token.tWBINANCE[ChainId.tBINANCE]\n  }\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  public static getNativeWrapper(chainId: ChainId): Token {\n    return Token.NATIVE_CURRENCY_WRAPPER[chainId]\n  }\n\n  public static isNativeWrapper(token: Token): boolean {\n    return Token.NATIVE_CURRENCY_WRAPPER[token.chainId].equals(token)\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\n// reexport for convenience\nexport const WETH = Token.WETH\nexport const WSPOA = Token.WSPOA\nexport const DXD = Token.DXD\nexport const WXDAI = Token.WXDAI\nexport const WMATIC = Token.WMATIC\n\nexport const tWAVALANCHE = Token.tWAVALANCHE\nexport const tWMATIC = Token.tWMATIC\nexport const tWBINANCE = Token.tWBINANCE\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, USD } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static nativeCurrency(amount: BigintIsh, chainId: number): CurrencyAmount {\n    const nativeCurrency = Currency.getNative(chainId)\n    invariant(!!nativeCurrency, 'NO_NATIVE_CURRENCY')\n    return new CurrencyAmount(nativeCurrency, amount)\n  }\n\n  /**\n   * Helper that calls the constructor with the USD currency\n   * @param amount amount of usd experessed in wei (with 18 decimals resolution)\n   */\n  public static usd(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(USD, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, ChainId, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.nativeCurrency(super.multiply(currencyAmount.raw).quotient, ChainId.MAINNET)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { BigintIsh, ChainId, FACTORY_ADDRESS, INIT_CODE_HASH, ROUTER_ADDRESS, _30 } from '../constants'\n\nconst UNISWAP_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\nconst SUSHISWAP_FACTORY_ADDRESS = '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac'\nconst SUSHISWAP_MATIC_FACTORY_ADDRESS = '0xc35DADB65012eC5796536bD9864eD8773aBc74C4'\nconst SWAPR_FACTORY_ADDRESS = '0x5D48C95AdfFD4B40c1AAADc4e08fc44117E02179'\nconst BAOSWAP_FACTORY_ADDRESS = '0x45de240fbe2077dd3e711299538a09854fae9c9b'\nconst QUICKSWAP_FACTORY_ADDRESS = '0x5757371414417b8C6CAad45bAeF941aBc7d3Ab32'\nconst SUSHISWAP_XDAI_FACTORY_ADDRESS = '0xc35DADB65012eC5796536bD9864eD8773aBc74C4'\n\nconst UNISWAP_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\nconst SUSHISWAP_ROUTER_ADDRESS = '0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F'\nconst SUSHISWAP_MATIC_ROUTER_ADDRESS = '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506'\nconst SWAPR_ROUTER_ADDRESS = '0xE43e60736b1cb4a75ad25240E2f9a62Bff65c0C0'\nconst BAOSWAP_ROUTER_ADDRESS = '0x6093AeBAC87d62b1A5a4cEec91204e35020E38bE'\nconst QUICKSWAP_ROUTER_ADDRESS = '0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff'\nconst SUSHISWAP_XDAI_ROUTER_ADDRESS = '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506'\n\n\n/**\n * A platform to which Swapr can route through.\n */\nexport class RoutablePlatform {\n  public readonly name: string\n  public readonly factoryAddress: { [supportedChainId in ChainId]?: string }\n  public readonly routerAddress: { [supportedChainId in ChainId]?: string }\n  public readonly initCodeHash : { [supportedChainId in ChainId]?: string }\n  public readonly defaultSwapFee: BigintIsh\n\n  public static readonly HONEYSWAP = new RoutablePlatform(\n    'Dexswap',\n    FACTORY_ADDRESS,\n    ROUTER_ADDRESS,\n    INIT_CODE_HASH,\n    _30\n  )\n  public static readonly UNISWAP = new RoutablePlatform(\n    'Uniswap',\n    { [ChainId.MAINNET]: UNISWAP_FACTORY_ADDRESS, [ChainId.RINKEBY]: UNISWAP_FACTORY_ADDRESS },\n    { [ChainId.MAINNET]: UNISWAP_ROUTER_ADDRESS, [ChainId.RINKEBY]: UNISWAP_ROUTER_ADDRESS },\n    { [ChainId.MAINNET]: '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' },\n    _30\n  )\n  public static readonly SUSHISWAP = new RoutablePlatform(\n    'Sushiswap',\n    { \n      [ChainId.MAINNET]: SUSHISWAP_FACTORY_ADDRESS, \n      [ChainId.RINKEBY]: SUSHISWAP_FACTORY_ADDRESS, \n      [ChainId.MATIC]: SUSHISWAP_MATIC_FACTORY_ADDRESS,\n      [ChainId.XDAI]: SUSHISWAP_XDAI_FACTORY_ADDRESS \n    },\n    { \n      [ChainId.MAINNET]: SUSHISWAP_ROUTER_ADDRESS, \n      [ChainId.RINKEBY]: SUSHISWAP_ROUTER_ADDRESS, \n      [ChainId.MATIC]: SUSHISWAP_MATIC_ROUTER_ADDRESS,\n      [ChainId.XDAI]: SUSHISWAP_XDAI_ROUTER_ADDRESS \n    },\n    { \n      [ChainId.MAINNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n      [ChainId.MATIC]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n      [ChainId.XDAI]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303'\n    },\n    _30\n  )\n  public static readonly SWAPR = new RoutablePlatform(\n    'Swapr',\n    { [ChainId.XDAI]: SWAPR_FACTORY_ADDRESS },\n    { [ChainId.XDAI]: SWAPR_ROUTER_ADDRESS },\n    { [ChainId.XDAI]: '0xd306a548755b9295ee49cc729e13ca4a45e00199bbd890fa146da43a50571776' },\n    _30\n  )\n  public static readonly BAOSWAP = new RoutablePlatform(\n    'Baoswap',\n    { [ChainId.XDAI]: BAOSWAP_FACTORY_ADDRESS },\n    { [ChainId.XDAI]: BAOSWAP_ROUTER_ADDRESS },\n    { [ChainId.XDAI]: '0x0bae3ead48c325ce433426d2e8e6b07dac10835baec21e163760682ea3d3520d' },\n    _30\n  )\n  public static readonly QUICKSWAP = new RoutablePlatform(\n    'Quickswap',\n    { [ChainId.MATIC]: QUICKSWAP_FACTORY_ADDRESS },\n    { [ChainId.MATIC]: QUICKSWAP_ROUTER_ADDRESS },\n    { [ChainId.MATIC]: '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' },\n    _30\n  )\n\n  public constructor(\n    name: string,\n    factoryAddress: { [supportedChainId in ChainId]?: string },\n    routerAddress: { [supportedChainId in ChainId]?: string },\n    initCodeHash: { [supportedChainId in ChainId]?: string },\n    defaultSwapFee: BigintIsh\n  ) {\n    this.name = name\n    this.factoryAddress = factoryAddress\n    this.routerAddress = routerAddress\n    this.initCodeHash = initCodeHash\n    this.defaultSwapFee = defaultSwapFee\n  }\n\n  public supportsChain(chainId: ChainId): boolean {\n    return !!this.factoryAddress[chainId]\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  _30,\n  _10000,\n  defaultSwapFee,\n  defaultProtocolFeeDenominator\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\nimport { ChainId } from '../constants'\nimport { RoutablePlatform } from './routable-platform'\nimport { LiquidityMiningCampaign } from './liquidity-mining-campaign'\n\nconst INITIAL_CACHE_STATE = {\n  [ChainId.MAINNET]: {},\n  [ChainId.RINKEBY]: {},\n  [ChainId.ARBITRUM_TESTNET_V3]: {},\n  [ChainId.SOKOL]: {},\n  [ChainId.XDAI]: {},\n  [ChainId.MATIC]: {},\n  [ChainId.tAVALANCHE]: {},\n  [ChainId.tMATIC]: {},\n  [ChainId.tBINANCE]: {}\n\n}\n\nlet PAIR_ADDRESS_CACHE: {\n  [supportedPlatformName: string]: {\n    [chainId: number]: { [token0Address: string]: { [token1Address: string]: string } }\n  }\n} = {\n  [RoutablePlatform.SWAPR.name]: {\n    ...INITIAL_CACHE_STATE\n  },\n  [RoutablePlatform.SUSHISWAP.name]: {\n    ...INITIAL_CACHE_STATE\n  },\n  [RoutablePlatform.UNISWAP.name]: {\n    ...INITIAL_CACHE_STATE\n  },\n  [RoutablePlatform.HONEYSWAP.name]: {\n    ...INITIAL_CACHE_STATE\n  },\n  [RoutablePlatform.BAOSWAP.name]: {\n    ...INITIAL_CACHE_STATE\n  },\n  [RoutablePlatform.QUICKSWAP.name]: {\n    ...INITIAL_CACHE_STATE\n  }\n}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n  public readonly swapFee: BigintIsh = defaultSwapFee\n  public readonly protocolFeeDenominator: BigintIsh = defaultProtocolFeeDenominator\n  public readonly platform: RoutablePlatform\n  public liquidityMiningCampaigns: LiquidityMiningCampaign[]\n\n  /**\n   * Returns true if the two pairs are equivalent, i.e. have the same address (calculated using create2).\n   * @param other other pair to compare\n   */\n  public equals(other: Pair): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.liquidityToken.address === other.liquidityToken.address\n  }\n\n  public static getAddress(tokenA: Token, tokenB: Token, platform: RoutablePlatform = RoutablePlatform.HONEYSWAP): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n    const chainId = tokenA.chainId\n    invariant(platform.supportsChain(chainId), 'INVALID_PLATFORM_CHAIN_ID')\n    if (PAIR_ADDRESS_CACHE?.[platform.name]?.[chainId]?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [platform.name]: {\n          ...PAIR_ADDRESS_CACHE[platform.name],\n          [chainId]: {\n            ...PAIR_ADDRESS_CACHE[platform.name][chainId],\n            [tokens[0].address]: {\n              ...PAIR_ADDRESS_CACHE?.[platform.name]?.[chainId]?.[tokens[0].address],\n              [tokens[1].address]: getCreate2Address(\n                platform.factoryAddress[chainId] as string,\n                keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n                platform.initCodeHash[chainId] as string,\n              )\n            }\n          }\n        }\n      }\n    }\n    return PAIR_ADDRESS_CACHE[platform.name][chainId][tokens[0].address][tokens[1].address]\n  }\n\n  constructor(\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount,\n    swapFee?: BigintIsh,\n    protocolFeeDenominator?: BigintIsh,\n    platform: RoutablePlatform = RoutablePlatform.HONEYSWAP,\n    liquidityMiningCampaigns: LiquidityMiningCampaign[] = []\n  ) {\n    invariant(tokenAmountA.token.chainId === tokenAmountB.token.chainId, 'CHAIN_ID')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n\n    this.platform = platform ? platform : RoutablePlatform.HONEYSWAP\n    const liquidityTokenAddress = Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, platform)\n    this.liquidityToken = new Token(tokenAmounts[0].token.chainId, liquidityTokenAddress, 18, 'DEX', 'DexSwap') // DexSwap Token LP?\n    this.protocolFeeDenominator = protocolFeeDenominator ? protocolFeeDenominator : defaultProtocolFeeDenominator\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n    this.swapFee = swapFee ? swapFee : platform.defaultSwapFee\n    this.liquidityMiningCampaigns = liquidityMiningCampaigns\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, JSBI.subtract(_10000, parseBigintIsh(this.swapFee)))\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _10000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [\n      outputAmount,\n      new Pair(\n        inputReserve.add(inputAmount),\n        outputReserve.subtract(outputAmount),\n        this.swapFee,\n        this.protocolFeeDenominator\n      )\n    ]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _10000)\n    const denominator = JSBI.multiply(\n      JSBI.subtract(outputReserve.raw, outputAmount.raw),\n      JSBI.subtract(_10000, parseBigintIsh(this.swapFee))\n    )\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [\n      inputAmount,\n      new Pair(\n        inputReserve.add(inputAmount),\n        outputReserve.subtract(outputAmount),\n        this.swapFee,\n        this.protocolFeeDenominator\n      )\n    ]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, parseBigintIsh(this.protocolFeeDenominator)), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency } from './currency'\nimport { Token } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      pairs.every(pair => pair.platform === pairs[0].platform),\n      'PLATFORM'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (Currency.isNative(input) && pairs[0].involvesToken(Token.getNativeWrapper(pairs[0].chainId))),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (Currency.isNative(output) && pairs[pairs.length - 1].involvesToken(Token.getNativeWrapper(pairs[0].chainId))),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : Token.getNativeWrapper(pairs[0].chainId)]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { RoutablePlatform } from './routable-platform'\nimport { Route } from './route'\nimport { currencyEquals, Token } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (Currency.isNative(currencyAmount.currency))\n    return new TokenAmount(Token.getNativeWrapper(chainId), currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (Currency.isNative(currency)) return Token.getNativeWrapper(chainId)\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n  /**\n   * The unique identifier of the chain on which the swap is being performed (used to correctly handle the native currency).\n   */\n  public readonly chainId: ChainId\n  /**\n   * The swap platform this trade will execute on\n   */\n  public readonly platform: RoutablePlatform\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    this.chainId = route.chainId\n\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : Currency.isNative(route.input)\n        ? CurrencyAmount.nativeCurrency(amounts[0].raw, this.chainId)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : Currency.isNative(route.output)\n        ? CurrencyAmount.nativeCurrency(amounts[amounts.length - 1].raw, this.chainId)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n    this.platform = this.route.pairs[0].platform\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.nativeCurrency(slippageAdjustedAmountOut, this.chainId)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.nativeCurrency(slippageAdjustedAmountIn, this.chainId)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { BigintIsh } from '../../constants'\nimport { PricedToken } from '../priced-token'\nimport { CurrencyAmount } from './currencyAmount'\nimport { TokenAmount } from './tokenAmount'\nimport { utils } from 'ethers'\n\nexport class PricedTokenAmount extends TokenAmount {\n  public readonly token: PricedToken\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: PricedToken, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public get nativeCurrencyAmount(): CurrencyAmount {\n    return new CurrencyAmount(\n      this.token.price.quoteCurrency,\n      utils\n        .parseUnits(\n          this.multiply(this.token.price).toFixed(this.token.price.quoteCurrency.decimals),\n          this.token.price.quoteCurrency.decimals\n        )\n        .toString()\n    )\n  }\n}\n","import { BigintIsh, ChainId, SECONDS_IN_YEAR } from '../constants'\nimport JSBI from 'jsbi'\nimport { parseBigintIsh } from '../utils'\nimport { CurrencyAmount, Fraction, Percent, TokenAmount } from './fractions'\nimport { PricedTokenAmount } from './fractions/priced-token-amount'\nimport { Pair } from './pair'\nimport invariant from 'tiny-invariant'\nimport { utils } from 'ethers'\nimport { Token } from './token'\n\n// this value is used as a floor to calculate apy, in order to avoid infinite results\nconst MINIMUM_STAKED_AMOUNT_NATIVE_CURRENCY: { [chainId in ChainId]: CurrencyAmount } = {\n  [ChainId.RINKEBY]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('0.05', Token.getNative(ChainId.RINKEBY).decimals).toString(),\n    ChainId.RINKEBY\n  ),\n  [ChainId.MAINNET]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('0.1', Token.getNative(ChainId.MAINNET).decimals).toString(),\n    ChainId.MAINNET\n  ),\n  [ChainId.XDAI]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('1000', Token.getNative(ChainId.XDAI).decimals).toString(),\n    ChainId.XDAI\n  ),\n  [ChainId.SOKOL]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('1000', Token.getNative(ChainId.SOKOL).decimals).toString(),\n    ChainId.SOKOL\n  ),\n  [ChainId.ARBITRUM_TESTNET_V3]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('0.05', Token.getNative(ChainId.ARBITRUM_TESTNET_V3).decimals).toString(),\n    ChainId.ARBITRUM_TESTNET_V3\n  ),\n  [ChainId.MATIC]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('1000', Token.getNative(ChainId.MATIC).decimals).toString(),\n    ChainId.MATIC\n  ),\n  [ChainId.tAVALANCHE]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('1000', Token.getNative(ChainId.tAVALANCHE).decimals).toString(),\n    ChainId.tAVALANCHE\n  ),\n  [ChainId.tMATIC]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('1000', Token.getNative(ChainId.tMATIC).decimals).toString(),\n    ChainId.MATIC\n  ),\n  [ChainId.tBINANCE]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('0.1', Token.getNative(ChainId.tBINANCE).decimals).toString(),\n    ChainId.tBINANCE\n  )\n\n\n}\n\nexport class LiquidityMiningCampaign {\n  public readonly chainId: ChainId\n  public readonly address?: string\n  public readonly startsAt: BigintIsh\n  public readonly endsAt: BigintIsh\n  public readonly rewards: PricedTokenAmount[]\n  public readonly targetedPair: Pair\n  public readonly staked: PricedTokenAmount\n  public readonly duration: BigintIsh\n  public readonly locked: boolean\n  public readonly stakingCap: TokenAmount\n\n  constructor(\n    startsAt: BigintIsh,\n    endsAt: BigintIsh,\n    targetedPair: Pair,\n    rewards: PricedTokenAmount[],\n    staked: PricedTokenAmount,\n    locked: boolean,\n    stakingCap: TokenAmount,\n    address?: string\n  ) {\n    invariant(JSBI.lessThan(parseBigintIsh(startsAt), parseBigintIsh(endsAt)), 'INCONSISTENT_DATES')\n    invariant(staked.token.equals(targetedPair.liquidityToken), 'STAKED_LP_TOKEN')\n    for (const reward of rewards) {\n      invariant(staked.token.chainId === reward.token.chainId, 'CHAIN_ID')\n    }\n    this.chainId = staked.token.chainId\n    this.startsAt = startsAt\n    this.endsAt = endsAt\n    this.rewards = rewards\n    this.targetedPair = targetedPair\n    this.staked = staked\n    this.duration = JSBI.subtract(parseBigintIsh(endsAt), parseBigintIsh(startsAt))\n    this.locked = locked\n    this.stakingCap = stakingCap\n    this.address = address\n  }\n\n  public get remainingDistributionPercentage(): Percent {\n    const now = JSBI.BigInt(Math.floor(Date.now() / 1000))\n    const jsbiStartsAt = parseBigintIsh(this.startsAt)\n    const jsbiEndsAt = parseBigintIsh(this.endsAt)\n    if (JSBI.lessThan(now, jsbiStartsAt)) return new Percent('100', '100')\n    if (JSBI.greaterThanOrEqual(now, jsbiEndsAt)) return new Percent('0', '100')\n    return new Percent(JSBI.subtract(jsbiEndsAt, now), this.duration)\n  }\n\n  public get remainingRewards(): PricedTokenAmount[] {\n    const remainingDistributionPercentage = this.remainingDistributionPercentage\n    return this.rewards.map(reward => {\n      return new PricedTokenAmount(reward.token, remainingDistributionPercentage.multiply(reward.raw).toFixed(0))\n    })\n  }\n\n  public get apy(): Percent {\n    const remainingRewards = this.remainingRewards\n\n    let stakedValueNativeCurrency = this.staked.nativeCurrencyAmount\n    if (stakedValueNativeCurrency.lessThan(MINIMUM_STAKED_AMOUNT_NATIVE_CURRENCY[this.chainId])) {\n      stakedValueNativeCurrency = MINIMUM_STAKED_AMOUNT_NATIVE_CURRENCY[this.chainId]\n    }\n\n    const cumulativeRemainingRewardAmountNativeCurrency = remainingRewards.reduce(\n      (accumulator, remainingRewardAmount) => {\n        return accumulator.add(remainingRewardAmount.nativeCurrencyAmount)\n      },\n      CurrencyAmount.nativeCurrency('0', this.chainId)\n    )\n\n    const yieldInPeriod = cumulativeRemainingRewardAmountNativeCurrency.divide(stakedValueNativeCurrency)\n    const annualizationMultiplier = new Fraction(SECONDS_IN_YEAR.toString(), this.duration.toString())\n    const rawApy = yieldInPeriod.multiply(annualizationMultiplier)\n    return new Percent(rawApy.numerator, rawApy.denominator)\n  }\n\n  public get currentlyActive(): boolean {\n    const now = JSBI.BigInt(Math.floor(Date.now() / 1000))\n    return (\n      JSBI.lessThanOrEqual(parseBigintIsh(this.startsAt), now) && JSBI.greaterThan(parseBigintIsh(this.endsAt), now)\n    )\n  }\n\n  public get ended(): boolean {\n    return JSBI.greaterThan(JSBI.BigInt(Math.floor(Date.now() / 1000)), parseBigintIsh(this.endsAt))\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { Price } from './fractions'\nimport { Token } from './token'\n\n/**\n * Represents an ERC20 token and its price, expressed in any given currency.\n */\nexport class PricedToken extends Token {\n  public readonly price: Price\n\n  constructor(chainId: ChainId, address: string, decimals: number, price: Price, symbol?: string, name?: string) {\n    invariant(price.baseCurrency.symbol === symbol && price.baseCurrency.decimals === decimals, 'TOKEN')\n    super(chainId, address, decimals, symbol, name)\n    this.price = price\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { Currency, CurrencyAmount, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const nativeCurrency = Currency.getNative(trade.chainId)\n    const etherIn = trade.inputAmount.currency === nativeCurrency\n    const etherOut = trade.outputAmount.currency === nativeCurrency\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import JSBI from 'jsbi'\nimport { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider, Provider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IDXswapPair from 'dxswap-core/build/IDXswapPair.json'\nimport IDXswapFactory from 'dxswap-core/build/IDXswapFactory.json'\nimport invariant from 'tiny-invariant'\nimport ERC20Abi from './abis/ERC20.json'\n// import TokenRegistryAbi from './abis/token-registry.json'\nimport {\n  ChainId,\n  BigintIsh,\n  FACTORY_ADDRESS,\n  PERMISSIVE_MULTICALL_ADDRESS,\n  PERMISSIVE_MULTICALL_ABI\n} from './constants'\nimport { Token } from './entities/token'\nimport { Currency } from './entities/currency'\nimport { Interface } from '@ethersproject/abi'\nimport { TokenList, TokenInfo } from './entities/token-list'\nimport { RoutablePlatform } from './entities/routable-platform'\nimport fetch from 'node-fetch'\n\nconst TOKEN_DATA_CACHE: {\n  [chainId: number]: { [address: string]: Currency }\n} = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': { decimals: 9, symbol: 'DGD', name: 'DigixDAO' } // DGD\n  }\n}\n\nconst TOKEN_LOGO_URI_CACHE: {\n  [chainId in ChainId]: { [address: string]: string }\n} = {\n  [ChainId.MAINNET]: {},\n  [ChainId.XDAI]: {},\n  [ChainId.SOKOL]: {},\n  [ChainId.ARBITRUM_TESTNET_V3]: {},\n  [ChainId.RINKEBY]: {},\n  [ChainId.MATIC]: {},\n  [ChainId.tAVALANCHE]: {},\n  [ChainId.tMATIC]: {},\n  [ChainId.tBINANCE]: {}\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider: Provider = getDefaultProvider(getNetwork(chainId))\n  ): Promise<Token> {\n    let tokenData: Currency\n    if (TOKEN_DATA_CACHE?.[chainId]?.[address]) {\n      tokenData = TOKEN_DATA_CACHE[chainId][address]\n    } else {\n      const multicall = new Contract(PERMISSIVE_MULTICALL_ADDRESS[chainId], PERMISSIVE_MULTICALL_ABI, provider)\n      const erc20Interface = new Contract(address, ERC20Abi, provider).interface\n      const symbolFunction = erc20Interface.getFunction('symbol()')\n      const nameFunction = erc20Interface.getFunction('name()')\n      const decimalsFunction = erc20Interface.getFunction('decimals()')\n      const result = await multicall.aggregate([\n        [address, erc20Interface.encodeFunctionData(symbolFunction)],\n        [address, erc20Interface.encodeFunctionData(nameFunction)],\n        [address, erc20Interface.encodeFunctionData(decimalsFunction)]\n      ])\n      tokenData = {\n        symbol: erc20Interface.decodeFunctionResult(symbolFunction, result.returnData[0])[0],\n        name: erc20Interface.decodeFunctionResult(nameFunction, result.returnData[1])[0],\n        decimals: erc20Interface.decodeFunctionResult(decimalsFunction, result.returnData[2])[0]\n      }\n      TOKEN_DATA_CACHE[chainId][address] = tokenData\n    }\n    return new Token(chainId, address, tokenData.decimals, tokenData.symbol, tokenData.name)\n  }\n\n  /**\n   * Fetch on-chain, information on multiple given ERC20 token addresses, using the given ethers provider\n   * (or a default one if not provided). The results are cached for efficient subsequent accesses.\n   * @param chainId chain of the token\n   * @param addresses addresses of the tokens for which the data is needed\n   * @param provider provider used to fetch the token\n   */\n  public static async fetchMultipleTokensData(\n    chainId: ChainId,\n    addresses: string[],\n    provider: Provider = getDefaultProvider(getNetwork(chainId))\n  ): Promise<Token[]> {\n    const { previouslyCachedTokens, missingTokens } = addresses.reduce<{\n      previouslyCachedTokens: Token[]\n      missingTokens: string[]\n    }>(\n      (\n        accumulator: {\n          previouslyCachedTokens: Token[]\n          missingTokens: string[]\n        },\n        address: string,\n        _currentIndex: number,\n        _array: string[]\n      ): { previouslyCachedTokens: Token[]; missingTokens: string[] } => {\n        if (TOKEN_DATA_CACHE?.[chainId]?.[address]) {\n          const cachedToken = TOKEN_DATA_CACHE[chainId][address]\n          accumulator.previouslyCachedTokens.push(\n            new Token(chainId, address, cachedToken.decimals, cachedToken.symbol, cachedToken.name)\n          )\n        } else {\n          accumulator.missingTokens.push(address)\n        }\n        return accumulator\n      },\n      { previouslyCachedTokens: [], missingTokens: [] }\n    )\n    const tokenData = previouslyCachedTokens\n    if (missingTokens.length > 0) {\n      const erc20Interface = new Interface(ERC20Abi)\n      const getSymbolFunction = erc20Interface.getFunction('symbol()')\n      const getNameFunction = erc20Interface.getFunction('name()')\n      const getDecimalsFunction = erc20Interface.getFunction('decimals()')\n      const multicall = new Contract(PERMISSIVE_MULTICALL_ADDRESS[chainId], PERMISSIVE_MULTICALL_ABI, provider)\n      const aggregatedCalls = missingTokens.reduce<[string, string][]>(\n        (\n          accumulator: [string, string][],\n          address: string,\n          _currentIndex: number,\n          _array: string[]\n        ): [string, string][] => {\n          accumulator.push([address, erc20Interface.encodeFunctionData(getSymbolFunction)])\n          accumulator.push([address, erc20Interface.encodeFunctionData(getNameFunction)])\n          accumulator.push([address, erc20Interface.encodeFunctionData(getDecimalsFunction)])\n          return accumulator\n        },\n        []\n      )\n      const result = await multicall.aggregateWithPermissiveness(aggregatedCalls)\n      const returnData = result[1]\n      missingTokens.forEach((address: string, index: number) => {\n        const [wrappedSymbol, wrappedName, wrappedDecimals] = returnData.slice(index * 3, index * 3 + 3)\n        if (!wrappedSymbol.success || !wrappedName.success || !wrappedDecimals.success) {\n          console.warn(`could not fetch ERC20 data for address ${address}`)\n          return\n        }\n        try {\n          tokenData.push(\n            new Token(\n              chainId,\n              address,\n              erc20Interface.decodeFunctionResult(getDecimalsFunction, wrappedDecimals.data)[0],\n              erc20Interface.decodeFunctionResult(getSymbolFunction, wrappedSymbol.data)[0],\n              erc20Interface.decodeFunctionResult(getNameFunction, wrappedName.data)[0]\n            )\n          )\n        } catch (error) {\n          console.error(`error decoding ERC20 data for address ${address}`)\n        }\n      })\n    }\n    return tokenData\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId)),\n    platform: RoutablePlatform = RoutablePlatform.HONEYSWAP\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB, platform)\n    const [reserves0, reserves1] = await new Contract(address, IDXswapPair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    const tokenAmountA = new TokenAmount(tokenA, balances[0])\n    const tokenAmountB = new TokenAmount(tokenB, balances[1])\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    const liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, platform),\n      18,\n      'DXS',\n      'DXswap'\n    )\n    const swapFee = JSBI.BigInt(await new Contract(liquidityToken.address, IDXswapPair.abi, provider).swapFee())\n    const protocolFeeDenominator = JSBI.BigInt(\n      await new Contract(\n        FACTORY_ADDRESS[tokenAmountA.token.chainId],\n        IDXswapFactory.abi,\n        provider\n      ).protocolFeeDenominator()\n    )\n    return new Pair(tokenAmountA, tokenAmountB, swapFee, protocolFeeDenominator)\n  }\n\n  /**\n   * Fetches swap fee information from a liquidity token of a token pair\n   * @param liquidityToken the liquidity token from which the swap fee info will be fetched\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchSwapFee(\n    liquidityToken: Token,\n    provider = getDefaultProvider(getNetwork(liquidityToken.chainId))\n  ): Promise<{\n    fee: BigintIsh\n    owner: string\n  }> {\n    return {\n      fee: JSBI.BigInt(await new Contract(liquidityToken.address, IDXswapPair.abi, provider).swapFee()),\n      owner: await new Contract(FACTORY_ADDRESS[liquidityToken.chainId], IDXswapFactory.abi, provider).feeToSetter()\n    }\n  }\n\n  /**\n   * Fetches swap fee information from liquidity tokens of token pairs\n   * @param liquidityToken the liquidity tokens from which the swap fee info will be fetched\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchSwapFees(\n    liquidityTokens: Token[],\n    provider = getDefaultProvider(getNetwork(liquidityTokens[0].chainId))\n  ): Promise<\n    {\n      fee: BigintIsh\n      owner: string\n    }[]\n  > {\n    const multicall = new Contract(\n      PERMISSIVE_MULTICALL_ADDRESS[liquidityTokens[0].chainId],\n      PERMISSIVE_MULTICALL_ABI,\n      provider\n    )\n    const factoryContract = new Contract(FACTORY_ADDRESS[liquidityTokens[0].chainId], IDXswapFactory.abi, provider)\n    const liquidityTokenContract = new Contract(liquidityTokens[0].address, IDXswapPair.abi, provider)\n    let calls = []\n    calls.push({\n      address: factoryContract.address,\n      callData: factoryContract.interface.encodeFunctionData(factoryContract.interface.getFunction('feeToSetter()'))\n    })\n    for (let tokenPairsIndex = 0; tokenPairsIndex < liquidityTokens.length; tokenPairsIndex++) {\n      calls.push({\n        address: liquidityTokens[tokenPairsIndex].address,\n        callData: liquidityTokenContract.interface.encodeFunctionData(\n          liquidityTokenContract.interface.getFunction('swapFee()')\n        )\n      })\n    }\n    const result = await multicall.aggregate(calls.map(call => [call.address, call.callData]))\n    const owner = factoryContract.interface.decodeFunctionResult(\n      factoryContract.interface.getFunction('feeToSetter()'),\n      result.returnData[0]\n    )[0]\n    let fees = []\n    for (let resultIndex = 1; resultIndex < result.returnData.length; resultIndex++) {\n      fees.push({\n        fee: JSBI.BigInt(\n          liquidityTokenContract.interface.decodeFunctionResult(\n            liquidityTokenContract.interface.getFunction('swapFee()'),\n            result.returnData[resultIndex]\n          )[0]\n        ),\n        owner\n      })\n    }\n    return fees\n  }\n\n  /**\n   * Fetches swap fee information of all registered token pairs from factory\n   * @param chainId the chainId of the network to fecth the swap fees\n   * @param swapFeesCache a cache of already fetched fees to be skiped\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchAllSwapFees(\n    chainId: ChainId,\n    swapFeesCache: {\n      [key: string]: {\n        fee: BigintIsh\n        owner: string\n      }\n    } = {},\n    provider = getDefaultProvider(getNetwork(chainId))\n  ): Promise<{\n    [key: string]: {\n      fee: BigintIsh\n      owner: string\n    }\n  }> {\n    const multicall = new Contract(PERMISSIVE_MULTICALL_ADDRESS[chainId], PERMISSIVE_MULTICALL_ABI, provider)\n    const factoryContract = new Contract(FACTORY_ADDRESS[chainId], IDXswapFactory.abi, provider)\n    const allPairsLength = await factoryContract.allPairsLength()\n    let allSwapPairs: {\n      [key: string]: {\n        fee: BigintIsh\n        owner: string\n      }\n    } = {}\n\n    // Get first token pairs from cache\n    let tokenPairsCache = Object.keys(swapFeesCache)\n    let tokenPairsToFetch: Token[] = []\n    for (let tokenPaisCacheIndex = 0; tokenPaisCacheIndex < tokenPairsCache.length; tokenPaisCacheIndex++) {\n      allSwapPairs[tokenPairsCache[tokenPaisCacheIndex]] = {\n        fee: swapFeesCache[tokenPairsCache[tokenPaisCacheIndex]].fee,\n        owner: swapFeesCache[tokenPairsCache[tokenPaisCacheIndex]].owner\n      }\n    }\n\n    // Get rest of the token pairs that are not cached\n    let calls = []\n    for (let pairIndex = tokenPairsCache.length; pairIndex < allPairsLength; pairIndex++)\n      calls.push({\n        address: factoryContract.address,\n        callData: factoryContract.interface.encodeFunctionData(\n          factoryContract.interface.getFunction('allPairs(uint)'),\n          [pairIndex]\n        )\n      })\n    const result = await multicall.aggregate(calls.map(call => [call.address, call.callData]))\n    for (let resultIndex = 0; resultIndex < result.returnData.length; resultIndex++) {\n      const tokenPairAddress = factoryContract.interface.decodeFunctionResult(\n        factoryContract.interface.getFunction('allPairs(uint256)'),\n        result.returnData[resultIndex]\n      )[0]\n      tokenPairsToFetch.push(new Token(chainId, tokenPairAddress, 18, 'DXS', 'DXswap'))\n    }\n\n    // Fetch the pairs that we dont have the fee and owner\n    const swapFeesFetched = await this.fetchSwapFees(tokenPairsToFetch, provider)\n    for (let tokenPairsToFetchIndex = 0; tokenPairsToFetchIndex < tokenPairsToFetch.length; tokenPairsToFetchIndex++)\n      allSwapPairs[tokenPairsToFetch[tokenPairsToFetchIndex].address] = swapFeesFetched[tokenPairsToFetchIndex]\n    return allSwapPairs\n  }\n\n  /**\n   * Fetches protocol fee information from the token pair factory\n   * @param chainId the chainId of the network to fecth the protocol fee\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchProtocolFee(\n    chainId: ChainId,\n    provider = getDefaultProvider(getNetwork(chainId))\n  ): Promise<{\n    feeDenominator: BigintIsh\n    feeReceiver: string\n  }> {\n    const factoryContract = await new Contract(FACTORY_ADDRESS[chainId], IDXswapFactory.abi, provider)\n    const feeDenominator = await factoryContract.protocolFeeDenominator()\n    const feeReceiver = await factoryContract.feeTo()\n    return { feeDenominator, feeReceiver }\n  }\n\n  /**\n   * Fetches the default DXdao token list from the token registry scheme.\n   * @param chainId the chainId of the network to fecth the protocol fee\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchDxDaoTokenList(chainId: ChainId): Promise<TokenList> {\n    const tokenListUrl = new Map([\n      [1, 'https://tokens.coingecko.com/uniswap/all.json'],\n      [100, 'https://tokens.honeyswap.org'],\n      [137, 'https://tokens.honeyswap.org'],\n      [97, 'https://github.com/brijk20/DEX/blob/main/package.json'],\n      [80001, 'https://github.com/brijk20/DEX/blob/main/package.json'],\n      [43113, 'https://github.com/brijk20/DEX/blob/main/package.json']\n    ])\n\n    // const tokenRegistryContract = new Contract(TOKEN_REGISTRY_ADDRESS[chainId], TokenRegistryAbi, provider)\n    // const tokenAddresses = await tokenRegistryContract.getTokens(DXSWAP_TOKEN_LIST_ID[chainId])\n    // const tokens = await this.fetchMultipleTokensData(chainId, tokenAddresses, provider)\n\n    const chainTokenURL = tokenListUrl.get(chainId) ?? ''\n\n    const response = await fetch(chainTokenURL, {\n      method: 'GET',\n      headers: {\n        'content-type': 'application/json;charset=UTF-8'\n      }\n    })\n\n    const tokenList = []\n\n    if (!response.ok) {\n      return {\n        name: 'default token list',\n        tokens: []\n      }\n    }\n\n    const { tokens }: { tokens: TokenInfo[] } = await response.json()\n\n    if (tokens.length != 0) {\n      await this.fetchTokenLogoUri(chainId, tokens)\n    }\n\n    for (const token of tokens) {\n      if (token.chainId === chainId) {\n        tokenList.push({\n          chainId,\n          address: token.address,\n          name: token.name!,\n          decimals: token.decimals,\n          symbol: token.symbol!,\n          logoURI: token.logoURI\n        })\n      }\n    }\n\n    return {\n      name: 'swapr default token list',\n      tokens: tokenList\n    }\n  }\n\n  private static async fetchTokenLogoUri(tokenChainId: number, tokens: TokenInfo[]): Promise<void> {\n    const chainId = tokenChainId\n    if (chainId !== ChainId.MAINNET && chainId !== ChainId.XDAI && chainId !== ChainId.MATIC) {\n      return // token logos not fully supported for testnets\n    }\n\n    if (Object.keys(TOKEN_LOGO_URI_CACHE[chainId]).length === 0) {\n      await this.populateTokenLogoCache(chainId, tokens)\n    }\n    return\n  }\n\n  public static async checkTokenLogoCache(chainId: ChainId): Promise<void> {\n    if (chainId !== ChainId.MAINNET && chainId !== ChainId.XDAI && chainId !== ChainId.MATIC) {\n      return // token logos not fully supported for testnets\n    }\n    if (Object.keys(TOKEN_LOGO_URI_CACHE[chainId]).length === 0) {\n      // populate cache\n      await this.fetchDxDaoTokenList(chainId)\n      return\n    }\n    return\n  }\n\n  public static async populateTokenLogoCache(chainId: ChainId, tokens: TokenInfo[]): Promise<void> {\n    TOKEN_LOGO_URI_CACHE[chainId] = tokens.reduce((cache: { [tokenAddress: string]: string }, token) => {\n      cache[token.address.toLowerCase()] = token.logoURI\n      return cache\n    }, {})\n  }\n\n  public static getCachedTokenLogo(token: Token): string {\n    const { chainId } = token\n    if (chainId !== ChainId.MAINNET && chainId !== ChainId.XDAI && chainId !== ChainId.MATIC) {\n      return ''\n    }\n    return TOKEN_LOGO_URI_CACHE[chainId][token.address.toLowerCase()] || ''\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","ZERO_ADDRESS","FACTORY_ADDRESS","MAINNET","coreMainnet","factory","RINKEBY","coreRinkeby","ARBITRUM_TESTNET_V3","coreArbitrumTestnetV3","SOKOL","coreSokol","XDAI","coreXDai","MATIC","coreMatic","ROUTER_ADDRESS","peripheryRinkeby","router","peripheryMainnet","peripheryArbitrumTestnetV3","peripherySokol","peripheryXDai","peripheryMatic","tAVALANCHE","tMATIC","tBINANCE","STAKING_REWARDS_FACTORY_ADDRESS","TOKEN_REGISTRY_ADDRESS","DXSWAP_TOKEN_LIST_ID","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_25","SECONDS_IN_YEAR","_30","_100","_1000","_10000","defaultSwapFee","defaultProtocolFeeDenominator","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","PERMISSIVE_MULTICALL_ADDRESS","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","Currency","decimals","symbol","isNative","currency","values","NATIVE_CURRENCY","indexOf","getNative","chainId","ETHER","SPOA","USD","Token","equals","other","sortsBefore","toLowerCase","getNativeWrapper","NATIVE_CURRENCY_WRAPPER","isNativeWrapper","token","WETH","WSPOA","WXDAI","WMATIC","tWAVALANCHE","tWMATIC","tWBINANCE","currencyEquals","currencyA","currencyB","DXD","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","amount","parsedAmount","exponentiate","nativeCurrency","usd","raw","toExact","TokenAmount","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","i","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","adjusted","UNISWAP_FACTORY_ADDRESS","SUSHISWAP_FACTORY_ADDRESS","SUSHISWAP_MATIC_FACTORY_ADDRESS","SWAPR_FACTORY_ADDRESS","BAOSWAP_FACTORY_ADDRESS","QUICKSWAP_FACTORY_ADDRESS","SUSHISWAP_XDAI_FACTORY_ADDRESS","UNISWAP_ROUTER_ADDRESS","SUSHISWAP_ROUTER_ADDRESS","SUSHISWAP_MATIC_ROUTER_ADDRESS","SWAPR_ROUTER_ADDRESS","BAOSWAP_ROUTER_ADDRESS","QUICKSWAP_ROUTER_ADDRESS","SUSHISWAP_XDAI_ROUTER_ADDRESS","RoutablePlatform","factoryAddress","routerAddress","initCodeHash","supportsChain","INITIAL_CACHE_STATE","PAIR_ADDRESS_CACHE","SWAPR","SUSHISWAP","UNISWAP","HONEYSWAP","BAOSWAP","QUICKSWAP","Pair","tokenAmountA","tokenAmountB","swapFee","protocolFeeDenominator","platform","liquidityMiningCampaigns","tokenAmounts","liquidityTokenAddress","liquidityToken","tokenA","tokenB","tokens","undefined","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","amounts","Array","nextPairs","EXACT_INPUT","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","PricedTokenAmount","price","utils","parseUnits","MINIMUM_STAKED_AMOUNT_NATIVE_CURRENCY","LiquidityMiningCampaign","startsAt","endsAt","targetedPair","rewards","staked","locked","stakingCap","reward","duration","now","Math","floor","Date","jsbiStartsAt","jsbiEndsAt","remainingDistributionPercentage","map","remainingRewards","stakedValueNativeCurrency","nativeCurrencyAmount","cumulativeRemainingRewardAmountNativeCurrency","remainingRewardAmount","yieldInPeriod","annualizationMultiplier","rawApy","PricedToken","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","deadline","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","TOKEN_DATA_CACHE","TOKEN_LOGO_URI_CACHE","Fetcher","fetchTokenData","provider","tokenData","getDefaultProvider","getNetwork","multicall","Contract","PERMISSIVE_MULTICALL_ABI","erc20Interface","ERC20Abi","symbolFunction","getFunction","nameFunction","decimalsFunction","aggregate","encodeFunctionData","result","decodeFunctionResult","returnData","fetchMultipleTokensData","addresses","_currentIndex","_array","cachedToken","previouslyCachedTokens","missingTokens","Interface","getSymbolFunction","getNameFunction","getDecimalsFunction","aggregatedCalls","aggregateWithPermissiveness","forEach","index","wrappedSymbol","wrappedName","wrappedDecimals","success","console","warn","data","fetchPairData","IDXswapPair","abi","getReserves","reserves0","reserves1","balances","IDXswapFactory","fetchSwapFee","feeToSetter","fee","owner","fetchSwapFees","liquidityTokens","factoryContract","liquidityTokenContract","calls","callData","tokenPairsIndex","call","fees","resultIndex","fetchAllSwapFees","swapFeesCache","allPairsLength","allSwapPairs","tokenPairsCache","keys","tokenPairsToFetch","tokenPaisCacheIndex","pairIndex","tokenPairAddress","swapFeesFetched","tokenPairsToFetchIndex","fetchProtocolFee","feeDenominator","feeTo","feeReceiver","fetchDxDaoTokenList","tokenListUrl","Map","chainTokenURL","get","fetch","method","headers","response","tokenList","ok","json","logoURI","fetchTokenLogoUri","tokenChainId","populateTokenLogoCache","checkTokenLogoCache","cache","getCachedTokenLogo"],"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"}