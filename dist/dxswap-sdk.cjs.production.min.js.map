{"version":3,"file":"dxswap-sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/utils.ts","../src/errors.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/routable-platform.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/entities/fractions/priced-token-amount.ts","../src/entities/liquidity-mining-campaign.ts","../src/entities/priced-token.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\nimport PERMISSIVE_MULTICALL_ABI from './abis/PermissiveMulticall.json'\nimport STAKING_REWARDS_FACTORY_ABI from './abis/staking-rewards-distribution-factory.json'\nimport STAKING_REWARDS_DISTRIBUTION_ABI from './abis/staking-rewards-distribution.json'\nimport TOKEN_REGISTRY_ABI from './abis/token-registry.json'\nimport {\n  rinkeby as coreRinkeby,\n  mainnet as coreMainnet,\n  arbitrumTestnetV3 as coreArbitrumTestnetV3,\n  sokol as coreSokol,\n  xdai as coreXDai,\n  matic as coreMatic\n} from 'dxswap-core/.contracts.json'\nimport {\n  rinkeby as peripheryRinkeby,\n  mainnet as peripheryMainnet,\n  arbitrumTestnetV3 as peripheryArbitrumTestnetV3,\n  sokol as peripherySokol,\n  xdai as peripheryXDai,\n  matic as peripheryMatic\n} from 'dxswap-periphery/.contracts.json'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  RINKEBY = 4,\n  ARBITRUM_TESTNET_V3 = 79377087078960,\n  SOKOL = 77,\n  XDAI = 100,\n  MATIC = 137,\n  tAVALANCHE = 43113,\n  tMATIC = 80001,\n  tBINANCE = 97\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\n\nexport const FACTORY_ADDRESS: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: coreMainnet.factory,\n  [ChainId.RINKEBY]: coreRinkeby.factory,\n  [ChainId.ARBITRUM_TESTNET_V3]: coreArbitrumTestnetV3.factory,\n  [ChainId.SOKOL]: coreSokol.factory,\n  [ChainId.XDAI]: coreXDai.factory,\n  [ChainId.MATIC]: coreMatic.factory\n}\n\nexport const ROUTER_ADDRESS: { [chainId in ChainId]?: string } = {\n  [ChainId.RINKEBY]: peripheryRinkeby.router,\n  [ChainId.MAINNET]: peripheryMainnet.router,\n  [ChainId.ARBITRUM_TESTNET_V3]: peripheryArbitrumTestnetV3.router,\n  [ChainId.SOKOL]: peripherySokol.router,\n  [ChainId.XDAI]: peripheryXDai.router,\n  [ChainId.MATIC]: peripheryMatic.router,\n  [ChainId.tAVALANCHE]: peripheryMatic.router,\n  [ChainId.tMATIC]: peripheryMatic.router,\n  [ChainId.tBINANCE]: peripheryMatic.router\n\n}\n\nexport const STAKING_REWARDS_FACTORY_ADDRESS: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: '0x0000000000000000000000000000000000001234',\n  [ChainId.RINKEBY]: '0xDcA39454f0B83c6f0807708b0E6a620dd9BA6808',\n  [ChainId.ARBITRUM_TESTNET_V3]: '0xB95Ad562EDE8DD78BBFC287fA18150e802b09D9F',\n  [ChainId.SOKOL]: '0xD436e756Cf41318ADeC62E8dCbEF2608753Ae068',\n  [ChainId.XDAI]: '0xCD2A45F36464FdB1065160e03A2353996Ea8Ff57',\n  [ChainId.MATIC]: '0x0000000000000000000000000000000000001234',\n  [ChainId.tAVALANCHE]: '0x0000000000000000000000000000000000001234',\n  [ChainId.tMATIC]: '0x0000000000000000000000000000000000001234',\n  [ChainId.tBINANCE]: '0x0000000000000000000000000000000000001234'\n  \n}\n\nexport const TOKEN_REGISTRY_ADDRESS: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: '0x93DB90445B76329e9ed96ECd74e76D8fbf2590d8',\n  [ChainId.RINKEBY]: '0x815d1b18f6baaeb3853b0f637475a5c2b28e2253',\n  [ChainId.ARBITRUM_TESTNET_V3]: '0x9d6f6d86b81289e40e07fcda805c06f6e9b8f629',\n  [ChainId.SOKOL]: '0x681c3836a5589b933062ACA4fd846c1287a2865F',\n  [ChainId.XDAI]: '0x85E001DfFF16F388Bc32Cd18009ceDF8F9b62C9E',\n  [ChainId.MATIC]: '0x0000000000000000000000000000000000001234',\n  [ChainId.tAVALANCHE]: '0x0000000000000000000000000000000000001234',\n  [ChainId.tMATIC]: '0x0000000000000000000000000000000000001234',\n  [ChainId.tBINANCE]: '0x0000000000000000000000000000000000001234'\n  \n}\n\nexport const DXSWAP_TOKEN_LIST_ID: { [chainId: number]: number } = {\n  [ChainId.MAINNET]: 1,\n  [ChainId.RINKEBY]: 1,\n  [ChainId.ARBITRUM_TESTNET_V3]: 1,\n  [ChainId.SOKOL]: 1,\n  [ChainId.XDAI]: 5,\n  [ChainId.MATIC]: 137,\n  [ChainId.tAVALANCHE]: 43113,\n  [ChainId.tMATIC]: 80001,\n  [ChainId.tBINANCE]: 97\n}\n\nexport const INIT_CODE_HASH: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: '0xd306a548755b9295ee49cc729e13ca4a45e00199bbd890fa146da43a50571776', // Swapr\n  [ChainId.RINKEBY]: '0xd306a548755b9295ee49cc729e13ca4a45e00199bbd890fa146da43a50571776', // Swapr\n  [ChainId.ARBITRUM_TESTNET_V3]: '0xd306a548755b9295ee49cc729e13ca4a45e00199bbd890fa146da43a50571776', // Swapr\n  [ChainId.SOKOL]: '0xd306a548755b9295ee49cc729e13ca4a45e00199bbd890fa146da43a50571776', // Swapr\n  [ChainId.XDAI]: '0x3f88503e8580ab941773b59034fb4b2a63e86dbc031b3633a925533ad3ed2b93', // Honeyswap\n  [ChainId.MATIC]: '0xae81bbc68f315fbbf7617eb881349af83b1e95241f616966e1e0583ecd0793fe', // Honeyswap\n  [ChainId.tAVALANCHE]: '0x3f88503e8580ab941773b59034fb4b2a63e86dbc031b3633a925533ad3ed2b93', // Honeyswap\n  [ChainId.tMATIC]: '0x3f88503e8580ab941773b59034fb4b2a63e86dbc031b3633a925533ad3ed2b93', // Honeyswap\n  [ChainId.tBINANCE]: '0x3f88503e8580ab941773b59034fb4b2a63e86dbc031b3633a925533ad3ed2b93' // Honeyswap\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _25 = JSBI.BigInt(25)\nexport const SECONDS_IN_YEAR = JSBI.BigInt(31536000)\nexport const _30 = JSBI.BigInt(30)\nexport const _100 = JSBI.BigInt(100)\nexport const _1000 = JSBI.BigInt(1000)\nexport const _10000 = JSBI.BigInt(10000)\n\nexport const defaultSwapFee = _25\nexport const defaultProtocolFeeDenominator = FIVE\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n\nconst PERMISSIVE_MULTICALL_ADDRESS: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: '0x0946f567d0ed891e6566c1da8e5093517f43571d',\n  [ChainId.RINKEBY]: '0x798d8ced4dff8f054a5153762187e84751a73344',\n  [ChainId.ARBITRUM_TESTNET_V3]: '0x73a08DC74eF4ed2c360199244bb69F1464204E7C',\n  [ChainId.SOKOL]: '0x4D97Bd8eFaCf46b33c4438Ed0B7B6AABfa2359FB',\n  [ChainId.XDAI]: '0x4E75068ED2338fCa56631E740B0723A6dbc1d5CD',\n  [ChainId.MATIC]: '0x95028E5B8a734bb7E2071F96De89BABe75be9C8E',\n  [ChainId.tAVALANCHE]: '0x4E75068ED2338fCa56631E740B0723A6dbc1d5CD',\n  [ChainId.tMATIC]: '0x4E75068ED2338fCa56631E740B0723A6dbc1d5CD',\n  [ChainId.tBINANCE]: '0x4E75068ED2338fCa56631E740B0723A6dbc1d5CD'\n}\n\nexport {\n  PERMISSIVE_MULTICALL_ABI,\n  TOKEN_REGISTRY_ABI,\n  PERMISSIVE_MULTICALL_ADDRESS,\n  STAKING_REWARDS_FACTORY_ABI,\n  STAKING_REWARDS_DISTRIBUTION_ABI\n}\n","import invariant from 'tiny-invariant'\n// import warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    // warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { ChainId, SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on the target chain.\n *\n * The only instances of the base class `Currency` are native currencies such as Ether for Ethereum,\n * SPOA for the Sokol testnet and xDAI for xDAI.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  // fiat currencies used to represent countervalues\n  public static readonly USD: Currency = new Currency(18, 'USD', 'US dollar')\n\n  // Native currencies for deployment chains\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n  public static readonly SPOA: Currency = new Currency(18, 'SPOA', 'Sokol POA')\n  public static readonly XDAI: Currency = new Currency(18, 'XDAI', 'xDAI')\n  public static readonly MATIC: Currency = new Currency(18, 'MATIC', 'MATIC')\n  public static readonly tAVALANCHE: Currency = new Currency(18, 'tAVAX', 'tAVALANCHE')\n  public static readonly tMATIC: Currency = new Currency(18, 'tMATIC', 'tMATIC')\n  public static readonly tBINANCE: Currency = new Currency(18, 'tBNB', 'tBNB')\n\n\n  private static readonly NATIVE_CURRENCY: { [chainId in ChainId]: Currency } = {\n    [ChainId.MAINNET]: Currency.ETHER,\n    [ChainId.RINKEBY]: Currency.ETHER,\n    [ChainId.ARBITRUM_TESTNET_V3]: Currency.ETHER,\n    [ChainId.SOKOL]: Currency.SPOA,\n    [ChainId.XDAI]: Currency.XDAI,\n    [ChainId.MATIC]: Currency.MATIC,\n    [ChainId.tAVALANCHE]: Currency.tAVALANCHE,\n    [ChainId.tMATIC]: Currency.tMATIC,\n    [ChainId.tBINANCE]: Currency.tBINANCE\n\n  }\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  public static isNative(currency: Currency): boolean {\n    return Object.values(Currency.NATIVE_CURRENCY).indexOf(currency) >= 0\n  }\n\n  public static getNative(chainId: ChainId): Currency {\n    return Currency.NATIVE_CURRENCY[chainId]\n  }\n}\n\nexport const USD = Currency.USD\n\nexport const ETHER = Currency.ETHER\nexport const SPOA = Currency.SPOA\nexport const XDAI = Currency.XDAI\nexport const MATIC = Currency.MATIC\nexport const tAVALANCHE = Currency.tAVALANCHE\nexport const tMATIC = Currency.tMATIC\nexport const tBINANCE = Currency.tBINANCE\n\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public static readonly WETH: { [key: number]: Token } = {\n    [ChainId.MAINNET]: new Token(\n      ChainId.MAINNET,\n      '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n      18,\n      'WETH',\n      'Wrapped Ether'\n    ),\n    [ChainId.RINKEBY]: new Token(\n      ChainId.RINKEBY,\n      '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n      18,\n      'WETH',\n      'Wrapped Ether'\n    ),\n    [ChainId.ARBITRUM_TESTNET_V3]: new Token(\n      ChainId.ARBITRUM_TESTNET_V3,\n      '0xf8456e5e6A225C2C1D74D8C9a4cB2B1d5dc1153b',\n      18,\n      'WETH',\n      'Wrapped Ether'\n    ),\n    [ChainId.SOKOL]: new Token(\n      ChainId.SOKOL,\n      '0xfDc50eF6b67F65Dddc36e56729a9D07BAe1A1f68',\n      18,\n      'WETH',\n      'Wrapped Ether'\n    ),\n    [ChainId.XDAI]: new Token(\n      ChainId.XDAI,\n      '0x6a023ccd1ff6f2045c3309768ead9e68f978f6e1',\n      18,\n      'WETH',\n      'Wrapped Ether on xDai'\n    ),\n    [ChainId.MATIC]: new Token(\n      ChainId.MATIC,\n      '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n      18,\n      'WETH',\n      'Wrapped Ether on Matic'\n    ),\n    [ChainId.tAVALANCHE]: new Token(\n      ChainId.tAVALANCHE,\n      '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n      18,\n      'WETH',\n      'Wrapped Ether on tAvalanche'\n    ),\n    [ChainId.tMATIC]: new Token(\n      ChainId.tMATIC,\n      '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n      18,\n      'WETH',\n      'Wrapped Ether on tMatic'\n    ),\n    [ChainId.tBINANCE]: new Token(\n      ChainId.tBINANCE,\n      '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n      18,\n      'WETH',\n      'Wrapped Ether on tBSC'\n    )\n  }\n\n  public static readonly WSPOA: { [key: number]: Token } = {\n    [ChainId.SOKOL]: new Token(ChainId.SOKOL, '0xc655c6D80ac92d75fBF4F40e95280aEb855B1E87', 18, 'WSPOA', 'Wrapped SPOA')\n  }\n\n  public static readonly WXDAI: { [key: number]: Token } = {\n    [ChainId.XDAI]: new Token(ChainId.XDAI, '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d', 18, 'WXDAI', 'Wrapped xDAI')\n  }\n\n  public static readonly WMATIC: { [key: number]: Token } = {\n    [ChainId.MATIC]: new Token(ChainId.MATIC, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped Matic')\n  }\n\n  public static readonly DXD: { [key: number]: Token } = {\n    [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0xa1d65E8fB6e87b60FECCBc582F7f97804B725521', 18, 'DXD', 'DXdao'),\n    [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, '0x554898A0BF98aB0C03ff86C7DccBE29269cc4d29', 18, 'DXD', 'DXdao'),\n    [ChainId.XDAI]: new Token(\n      ChainId.XDAI,\n      '0xb90d6bec20993be5d72a5ab353343f7a0281f158',\n      18,\n      'DXD',\n      'DXdao from Ethereum'\n    )\n  }\n\n  public static readonly tWAVALANCHE: { [key: number]: Token } = {\n    [ChainId.tAVALANCHE]: new Token(ChainId.tAVALANCHE, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'tWAVAX', 'Wrapped tAvalanche')\n  }\n\n  public static readonly tWMATIC: { [key: number]: Token } = {\n    [ChainId.tMATIC]: new Token(ChainId.tMATIC, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'tWMATIC', 'Wrapped tMatic')\n  }\n\n  public static readonly tWBINANCE: { [key: number]: Token } = {\n    [ChainId.tBINANCE]: new Token(ChainId.tBINANCE, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'tWBNB', 'Wrapped tBNB')\n  }\n\n  private static readonly NATIVE_CURRENCY_WRAPPER: { [chainId in ChainId]: Token } = {\n    [ChainId.MAINNET]: Token.WETH[ChainId.MAINNET],\n    [ChainId.RINKEBY]: Token.WETH[ChainId.RINKEBY],\n    [ChainId.ARBITRUM_TESTNET_V3]: Token.WETH[ChainId.ARBITRUM_TESTNET_V3],\n    [ChainId.SOKOL]: Token.WSPOA[ChainId.SOKOL],\n    [ChainId.XDAI]: Token.WXDAI[ChainId.XDAI],\n    [ChainId.MATIC]: Token.WMATIC[ChainId.MATIC],\n\n    [ChainId.tAVALANCHE]: Token.tWAVALANCHE[ChainId.tAVALANCHE],\n    [ChainId.tMATIC]: Token.tWMATIC[ChainId.tMATIC],\n    [ChainId.tBINANCE]: Token.tWBINANCE[ChainId.tBINANCE]\n  }\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  public static getNativeWrapper(chainId: ChainId): Token {\n    return Token.NATIVE_CURRENCY_WRAPPER[chainId]\n  }\n\n  public static isNativeWrapper(token: Token): boolean {\n    return Token.NATIVE_CURRENCY_WRAPPER[token.chainId].equals(token)\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\n// reexport for convenience\nexport const WETH = Token.WETH\nexport const WSPOA = Token.WSPOA\nexport const DXD = Token.DXD\nexport const WXDAI = Token.WXDAI\nexport const WMATIC = Token.WMATIC\n\nexport const tWAVALANCHE = Token.tWAVALANCHE\nexport const tWMATIC = Token.tWMATIC\nexport const tWBINANCE = Token.tWBINANCE\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, USD } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static nativeCurrency(amount: BigintIsh, chainId: number): CurrencyAmount {\n    const nativeCurrency = Currency.getNative(chainId)\n    invariant(!!nativeCurrency, 'NO_NATIVE_CURRENCY')\n    return new CurrencyAmount(nativeCurrency, amount)\n  }\n\n  /**\n   * Helper that calls the constructor with the USD currency\n   * @param amount amount of usd experessed in wei (with 18 decimals resolution)\n   */\n  public static usd(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(USD, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, ChainId, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.nativeCurrency(super.multiply(currencyAmount.raw).quotient, ChainId.MAINNET)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { BigintIsh, ChainId, FACTORY_ADDRESS, INIT_CODE_HASH, ROUTER_ADDRESS, _30 } from '../constants'\n\nconst UNISWAP_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\nconst SUSHISWAP_FACTORY_ADDRESS = '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac'\nconst SUSHISWAP_MATIC_FACTORY_ADDRESS = '0xc35DADB65012eC5796536bD9864eD8773aBc74C4'\nconst SWAPR_FACTORY_ADDRESS = '0x5D48C95AdfFD4B40c1AAADc4e08fc44117E02179'\nconst BAOSWAP_FACTORY_ADDRESS = '0x45de240fbe2077dd3e711299538a09854fae9c9b'\nconst QUICKSWAP_FACTORY_ADDRESS = '0x5757371414417b8C6CAad45bAeF941aBc7d3Ab32'\nconst SUSHISWAP_XDAI_FACTORY_ADDRESS = '0xc35DADB65012eC5796536bD9864eD8773aBc74C4'\n\nconst UNISWAP_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\nconst SUSHISWAP_ROUTER_ADDRESS = '0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F'\nconst SUSHISWAP_MATIC_ROUTER_ADDRESS = '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506'\nconst SWAPR_ROUTER_ADDRESS = '0xE43e60736b1cb4a75ad25240E2f9a62Bff65c0C0'\nconst BAOSWAP_ROUTER_ADDRESS = '0x6093AeBAC87d62b1A5a4cEec91204e35020E38bE'\nconst QUICKSWAP_ROUTER_ADDRESS = '0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff'\nconst SUSHISWAP_XDAI_ROUTER_ADDRESS = '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506'\n\n\n/**\n * A platform to which Swapr can route through.\n */\nexport class RoutablePlatform {\n  public readonly name: string\n  public readonly factoryAddress: { [supportedChainId in ChainId]?: string }\n  public readonly routerAddress: { [supportedChainId in ChainId]?: string }\n  public readonly initCodeHash : { [supportedChainId in ChainId]?: string }\n  public readonly defaultSwapFee: BigintIsh\n\n  public static readonly HONEYSWAP = new RoutablePlatform(\n    'Dexswap',\n    FACTORY_ADDRESS,\n    ROUTER_ADDRESS,\n    INIT_CODE_HASH,\n    _30\n  )\n  public static readonly UNISWAP = new RoutablePlatform(\n    'Uniswap',\n    { [ChainId.MAINNET]: UNISWAP_FACTORY_ADDRESS, [ChainId.RINKEBY]: UNISWAP_FACTORY_ADDRESS },\n    { [ChainId.MAINNET]: UNISWAP_ROUTER_ADDRESS, [ChainId.RINKEBY]: UNISWAP_ROUTER_ADDRESS },\n    { [ChainId.MAINNET]: '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' },\n    _30\n  )\n  public static readonly SUSHISWAP = new RoutablePlatform(\n    'Sushiswap',\n    { \n      [ChainId.MAINNET]: SUSHISWAP_FACTORY_ADDRESS, \n      [ChainId.RINKEBY]: SUSHISWAP_FACTORY_ADDRESS, \n      [ChainId.MATIC]: SUSHISWAP_MATIC_FACTORY_ADDRESS,\n      [ChainId.XDAI]: SUSHISWAP_XDAI_FACTORY_ADDRESS \n    },\n    { \n      [ChainId.MAINNET]: SUSHISWAP_ROUTER_ADDRESS, \n      [ChainId.RINKEBY]: SUSHISWAP_ROUTER_ADDRESS, \n      [ChainId.MATIC]: SUSHISWAP_MATIC_ROUTER_ADDRESS,\n      [ChainId.XDAI]: SUSHISWAP_XDAI_ROUTER_ADDRESS \n    },\n    { \n      [ChainId.MAINNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n      [ChainId.MATIC]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n      [ChainId.XDAI]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303'\n    },\n    _30\n  )\n  public static readonly SWAPR = new RoutablePlatform(\n    'Swapr',\n    { [ChainId.XDAI]: SWAPR_FACTORY_ADDRESS },\n    { [ChainId.XDAI]: SWAPR_ROUTER_ADDRESS },\n    { [ChainId.XDAI]: '0xd306a548755b9295ee49cc729e13ca4a45e00199bbd890fa146da43a50571776' },\n    _30\n  )\n  public static readonly BAOSWAP = new RoutablePlatform(\n    'Baoswap',\n    { [ChainId.XDAI]: BAOSWAP_FACTORY_ADDRESS },\n    { [ChainId.XDAI]: BAOSWAP_ROUTER_ADDRESS },\n    { [ChainId.XDAI]: '0x0bae3ead48c325ce433426d2e8e6b07dac10835baec21e163760682ea3d3520d' },\n    _30\n  )\n  public static readonly QUICKSWAP = new RoutablePlatform(\n    'Quickswap',\n    { [ChainId.MATIC]: QUICKSWAP_FACTORY_ADDRESS },\n    { [ChainId.MATIC]: QUICKSWAP_ROUTER_ADDRESS },\n    { [ChainId.MATIC]: '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' },\n    _30\n  )\n\n  public constructor(\n    name: string,\n    factoryAddress: { [supportedChainId in ChainId]?: string },\n    routerAddress: { [supportedChainId in ChainId]?: string },\n    initCodeHash: { [supportedChainId in ChainId]?: string },\n    defaultSwapFee: BigintIsh\n  ) {\n    this.name = name\n    this.factoryAddress = factoryAddress\n    this.routerAddress = routerAddress\n    this.initCodeHash = initCodeHash\n    this.defaultSwapFee = defaultSwapFee\n  }\n\n  public supportsChain(chainId: ChainId): boolean {\n    return !!this.factoryAddress[chainId]\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  _30,\n  _10000,\n  defaultSwapFee,\n  defaultProtocolFeeDenominator\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\nimport { ChainId } from '../constants'\nimport { RoutablePlatform } from './routable-platform'\nimport { LiquidityMiningCampaign } from './liquidity-mining-campaign'\n\nconst INITIAL_CACHE_STATE = {\n  [ChainId.MAINNET]: {},\n  [ChainId.RINKEBY]: {},\n  [ChainId.ARBITRUM_TESTNET_V3]: {},\n  [ChainId.SOKOL]: {},\n  [ChainId.XDAI]: {},\n  [ChainId.MATIC]: {},\n  [ChainId.tAVALANCHE]: {},\n  [ChainId.tMATIC]: {},\n  [ChainId.tBINANCE]: {}\n\n}\n\nlet PAIR_ADDRESS_CACHE: {\n  [supportedPlatformName: string]: {\n    [chainId: number]: { [token0Address: string]: { [token1Address: string]: string } }\n  }\n} = {\n  [RoutablePlatform.SWAPR.name]: {\n    ...INITIAL_CACHE_STATE\n  },\n  [RoutablePlatform.SUSHISWAP.name]: {\n    ...INITIAL_CACHE_STATE\n  },\n  [RoutablePlatform.UNISWAP.name]: {\n    ...INITIAL_CACHE_STATE\n  },\n  [RoutablePlatform.HONEYSWAP.name]: {\n    ...INITIAL_CACHE_STATE\n  },\n  [RoutablePlatform.BAOSWAP.name]: {\n    ...INITIAL_CACHE_STATE\n  },\n  [RoutablePlatform.QUICKSWAP.name]: {\n    ...INITIAL_CACHE_STATE\n  }\n}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n  public readonly swapFee: BigintIsh = defaultSwapFee\n  public readonly protocolFeeDenominator: BigintIsh = defaultProtocolFeeDenominator\n  public readonly platform: RoutablePlatform\n  public liquidityMiningCampaigns: LiquidityMiningCampaign[]\n\n  /**\n   * Returns true if the two pairs are equivalent, i.e. have the same address (calculated using create2).\n   * @param other other pair to compare\n   */\n  public equals(other: Pair): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.liquidityToken.address === other.liquidityToken.address\n  }\n\n  public static getAddress(tokenA: Token, tokenB: Token, platform: RoutablePlatform = RoutablePlatform.HONEYSWAP): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n    const chainId = tokenA.chainId\n    invariant(platform.supportsChain(chainId), 'INVALID_PLATFORM_CHAIN_ID')\n    if (PAIR_ADDRESS_CACHE?.[platform.name]?.[chainId]?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [platform.name]: {\n          ...PAIR_ADDRESS_CACHE[platform.name],\n          [chainId]: {\n            ...PAIR_ADDRESS_CACHE[platform.name][chainId],\n            [tokens[0].address]: {\n              ...PAIR_ADDRESS_CACHE?.[platform.name]?.[chainId]?.[tokens[0].address],\n              [tokens[1].address]: getCreate2Address(\n                platform.factoryAddress[chainId] as string,\n                keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n                platform.initCodeHash[chainId] as string,\n              )\n            }\n          }\n        }\n      }\n    }\n    return PAIR_ADDRESS_CACHE[platform.name][chainId][tokens[0].address][tokens[1].address]\n  }\n\n  constructor(\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount,\n    swapFee?: BigintIsh,\n    protocolFeeDenominator?: BigintIsh,\n    platform: RoutablePlatform = RoutablePlatform.HONEYSWAP,\n    liquidityMiningCampaigns: LiquidityMiningCampaign[] = []\n  ) {\n    invariant(tokenAmountA.token.chainId === tokenAmountB.token.chainId, 'CHAIN_ID')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n\n    this.platform = platform ? platform : RoutablePlatform.HONEYSWAP\n    const liquidityTokenAddress = Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, platform)\n    this.liquidityToken = new Token(tokenAmounts[0].token.chainId, liquidityTokenAddress, 18, 'DEX', 'DexSwap') // DexSwap Token LP?\n    this.protocolFeeDenominator = protocolFeeDenominator ? protocolFeeDenominator : defaultProtocolFeeDenominator\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n    this.swapFee = swapFee ? swapFee : platform.defaultSwapFee\n    this.liquidityMiningCampaigns = liquidityMiningCampaigns\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, JSBI.subtract(_10000, parseBigintIsh(this.swapFee)))\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _10000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [\n      outputAmount,\n      new Pair(\n        inputReserve.add(inputAmount),\n        outputReserve.subtract(outputAmount),\n        this.swapFee,\n        this.protocolFeeDenominator\n      )\n    ]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _10000)\n    const denominator = JSBI.multiply(\n      JSBI.subtract(outputReserve.raw, outputAmount.raw),\n      JSBI.subtract(_10000, parseBigintIsh(this.swapFee))\n    )\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [\n      inputAmount,\n      new Pair(\n        inputReserve.add(inputAmount),\n        outputReserve.subtract(outputAmount),\n        this.swapFee,\n        this.protocolFeeDenominator\n      )\n    ]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, parseBigintIsh(this.protocolFeeDenominator)), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency } from './currency'\nimport { Token } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      pairs.every(pair => pair.platform === pairs[0].platform),\n      'PLATFORM'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (Currency.isNative(input) && pairs[0].involvesToken(Token.getNativeWrapper(pairs[0].chainId))),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (Currency.isNative(output) && pairs[pairs.length - 1].involvesToken(Token.getNativeWrapper(pairs[0].chainId))),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : Token.getNativeWrapper(pairs[0].chainId)]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { RoutablePlatform } from './routable-platform'\nimport { Route } from './route'\nimport { currencyEquals, Token } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (Currency.isNative(currencyAmount.currency))\n    return new TokenAmount(Token.getNativeWrapper(chainId), currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (Currency.isNative(currency)) return Token.getNativeWrapper(chainId)\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n  /**\n   * The unique identifier of the chain on which the swap is being performed (used to correctly handle the native currency).\n   */\n  public readonly chainId: ChainId\n  /**\n   * The swap platform this trade will execute on\n   */\n  public readonly platform: RoutablePlatform\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    this.chainId = route.chainId\n\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : Currency.isNative(route.input)\n        ? CurrencyAmount.nativeCurrency(amounts[0].raw, this.chainId)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : Currency.isNative(route.output)\n        ? CurrencyAmount.nativeCurrency(amounts[amounts.length - 1].raw, this.chainId)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n    this.platform = this.route.pairs[0].platform\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.nativeCurrency(slippageAdjustedAmountOut, this.chainId)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.nativeCurrency(slippageAdjustedAmountIn, this.chainId)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { BigintIsh } from '../../constants'\nimport { PricedToken } from '../priced-token'\nimport { CurrencyAmount } from './currencyAmount'\nimport { TokenAmount } from './tokenAmount'\nimport { utils } from 'ethers'\n\nexport class PricedTokenAmount extends TokenAmount {\n  public readonly token: PricedToken\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: PricedToken, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public get nativeCurrencyAmount(): CurrencyAmount {\n    return new CurrencyAmount(\n      this.token.price.quoteCurrency,\n      utils\n        .parseUnits(\n          this.multiply(this.token.price).toFixed(this.token.price.quoteCurrency.decimals),\n          this.token.price.quoteCurrency.decimals\n        )\n        .toString()\n    )\n  }\n}\n","import { BigintIsh, ChainId, SECONDS_IN_YEAR } from '../constants'\nimport JSBI from 'jsbi'\nimport { parseBigintIsh } from '../utils'\nimport { CurrencyAmount, Fraction, Percent, TokenAmount } from './fractions'\nimport { PricedTokenAmount } from './fractions/priced-token-amount'\nimport { Pair } from './pair'\nimport invariant from 'tiny-invariant'\nimport { utils } from 'ethers'\nimport { Token } from './token'\n\n// this value is used as a floor to calculate apy, in order to avoid infinite results\nconst MINIMUM_STAKED_AMOUNT_NATIVE_CURRENCY: { [chainId in ChainId]: CurrencyAmount } = {\n  [ChainId.RINKEBY]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('0.05', Token.getNative(ChainId.RINKEBY).decimals).toString(),\n    ChainId.RINKEBY\n  ),\n  [ChainId.MAINNET]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('0.1', Token.getNative(ChainId.MAINNET).decimals).toString(),\n    ChainId.MAINNET\n  ),\n  [ChainId.XDAI]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('1000', Token.getNative(ChainId.XDAI).decimals).toString(),\n    ChainId.XDAI\n  ),\n  [ChainId.SOKOL]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('1000', Token.getNative(ChainId.SOKOL).decimals).toString(),\n    ChainId.SOKOL\n  ),\n  [ChainId.ARBITRUM_TESTNET_V3]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('0.05', Token.getNative(ChainId.ARBITRUM_TESTNET_V3).decimals).toString(),\n    ChainId.ARBITRUM_TESTNET_V3\n  ),\n  [ChainId.MATIC]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('1000', Token.getNative(ChainId.MATIC).decimals).toString(),\n    ChainId.MATIC\n  ),\n  [ChainId.tAVALANCHE]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('1000', Token.getNative(ChainId.tAVALANCHE).decimals).toString(),\n    ChainId.tAVALANCHE\n  ),\n  [ChainId.tMATIC]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('1000', Token.getNative(ChainId.tMATIC).decimals).toString(),\n    ChainId.MATIC\n  ),\n  [ChainId.tBINANCE]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('0.1', Token.getNative(ChainId.tBINANCE).decimals).toString(),\n    ChainId.tBINANCE\n  )\n\n\n}\n\nexport class LiquidityMiningCampaign {\n  public readonly chainId: ChainId\n  public readonly address?: string\n  public readonly startsAt: BigintIsh\n  public readonly endsAt: BigintIsh\n  public readonly rewards: PricedTokenAmount[]\n  public readonly targetedPair: Pair\n  public readonly staked: PricedTokenAmount\n  public readonly duration: BigintIsh\n  public readonly locked: boolean\n  public readonly stakingCap: TokenAmount\n\n  constructor(\n    startsAt: BigintIsh,\n    endsAt: BigintIsh,\n    targetedPair: Pair,\n    rewards: PricedTokenAmount[],\n    staked: PricedTokenAmount,\n    locked: boolean,\n    stakingCap: TokenAmount,\n    address?: string\n  ) {\n    invariant(JSBI.lessThan(parseBigintIsh(startsAt), parseBigintIsh(endsAt)), 'INCONSISTENT_DATES')\n    invariant(staked.token.equals(targetedPair.liquidityToken), 'STAKED_LP_TOKEN')\n    for (const reward of rewards) {\n      invariant(staked.token.chainId === reward.token.chainId, 'CHAIN_ID')\n    }\n    this.chainId = staked.token.chainId\n    this.startsAt = startsAt\n    this.endsAt = endsAt\n    this.rewards = rewards\n    this.targetedPair = targetedPair\n    this.staked = staked\n    this.duration = JSBI.subtract(parseBigintIsh(endsAt), parseBigintIsh(startsAt))\n    this.locked = locked\n    this.stakingCap = stakingCap\n    this.address = address\n  }\n\n  public get remainingDistributionPercentage(): Percent {\n    const now = JSBI.BigInt(Math.floor(Date.now() / 1000))\n    const jsbiStartsAt = parseBigintIsh(this.startsAt)\n    const jsbiEndsAt = parseBigintIsh(this.endsAt)\n    if (JSBI.lessThan(now, jsbiStartsAt)) return new Percent('100', '100')\n    if (JSBI.greaterThanOrEqual(now, jsbiEndsAt)) return new Percent('0', '100')\n    return new Percent(JSBI.subtract(jsbiEndsAt, now), this.duration)\n  }\n\n  public get remainingRewards(): PricedTokenAmount[] {\n    const remainingDistributionPercentage = this.remainingDistributionPercentage\n    return this.rewards.map(reward => {\n      return new PricedTokenAmount(reward.token, remainingDistributionPercentage.multiply(reward.raw).toFixed(0))\n    })\n  }\n\n  public get apy(): Percent {\n    const remainingRewards = this.remainingRewards\n\n    let stakedValueNativeCurrency = this.staked.nativeCurrencyAmount\n    if (stakedValueNativeCurrency.lessThan(MINIMUM_STAKED_AMOUNT_NATIVE_CURRENCY[this.chainId])) {\n      stakedValueNativeCurrency = MINIMUM_STAKED_AMOUNT_NATIVE_CURRENCY[this.chainId]\n    }\n\n    const cumulativeRemainingRewardAmountNativeCurrency = remainingRewards.reduce(\n      (accumulator, remainingRewardAmount) => {\n        return accumulator.add(remainingRewardAmount.nativeCurrencyAmount)\n      },\n      CurrencyAmount.nativeCurrency('0', this.chainId)\n    )\n\n    const yieldInPeriod = cumulativeRemainingRewardAmountNativeCurrency.divide(stakedValueNativeCurrency)\n    const annualizationMultiplier = new Fraction(SECONDS_IN_YEAR.toString(), this.duration.toString())\n    const rawApy = yieldInPeriod.multiply(annualizationMultiplier)\n    return new Percent(rawApy.numerator, rawApy.denominator)\n  }\n\n  public get currentlyActive(): boolean {\n    const now = JSBI.BigInt(Math.floor(Date.now() / 1000))\n    return (\n      JSBI.lessThanOrEqual(parseBigintIsh(this.startsAt), now) && JSBI.greaterThan(parseBigintIsh(this.endsAt), now)\n    )\n  }\n\n  public get ended(): boolean {\n    return JSBI.greaterThan(JSBI.BigInt(Math.floor(Date.now() / 1000)), parseBigintIsh(this.endsAt))\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { Price } from './fractions'\nimport { Token } from './token'\n\n/**\n * Represents an ERC20 token and its price, expressed in any given currency.\n */\nexport class PricedToken extends Token {\n  public readonly price: Price\n\n  constructor(chainId: ChainId, address: string, decimals: number, price: Price, symbol?: string, name?: string) {\n    invariant(price.baseCurrency.symbol === symbol && price.baseCurrency.decimals === decimals, 'TOKEN')\n    super(chainId, address, decimals, symbol, name)\n    this.price = price\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { Currency, CurrencyAmount, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const nativeCurrency = Currency.getNative(trade.chainId)\n    const etherIn = trade.inputAmount.currency === nativeCurrency\n    const etherOut = trade.outputAmount.currency === nativeCurrency\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import JSBI from 'jsbi'\nimport { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider, Provider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IDXswapPair from 'dxswap-core/build/IDXswapPair.json'\nimport IDXswapFactory from 'dxswap-core/build/IDXswapFactory.json'\nimport invariant from 'tiny-invariant'\nimport ERC20Abi from './abis/ERC20.json'\n// import TokenRegistryAbi from './abis/token-registry.json'\nimport {\n  ChainId,\n  BigintIsh,\n  FACTORY_ADDRESS,\n  PERMISSIVE_MULTICALL_ADDRESS,\n  PERMISSIVE_MULTICALL_ABI\n} from './constants'\nimport { Token } from './entities/token'\nimport { Currency } from './entities/currency'\nimport { Interface } from '@ethersproject/abi'\nimport { TokenList, TokenInfo } from './entities/token-list'\nimport { RoutablePlatform } from './entities/routable-platform'\nimport fetch from 'node-fetch'\n\nconst TOKEN_DATA_CACHE: {\n  [chainId: number]: { [address: string]: Currency }\n} = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': { decimals: 9, symbol: 'DGD', name: 'DigixDAO' } // DGD\n  }\n}\n\nconst TOKEN_LOGO_URI_CACHE: {\n  [chainId in ChainId]: { [address: string]: string }\n} = {\n  [ChainId.MAINNET]: {},\n  [ChainId.XDAI]: {},\n  [ChainId.SOKOL]: {},\n  [ChainId.ARBITRUM_TESTNET_V3]: {},\n  [ChainId.RINKEBY]: {},\n  [ChainId.MATIC]: {},\n  [ChainId.tAVALANCHE]: {},\n  [ChainId.tMATIC]: {},\n  [ChainId.tBINANCE]: {}\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider: Provider = getDefaultProvider(getNetwork(chainId))\n  ): Promise<Token> {\n    let tokenData: Currency\n    if (TOKEN_DATA_CACHE?.[chainId]?.[address]) {\n      tokenData = TOKEN_DATA_CACHE[chainId][address]\n    } else {\n      const multicall = new Contract(PERMISSIVE_MULTICALL_ADDRESS[chainId], PERMISSIVE_MULTICALL_ABI, provider)\n      const erc20Interface = new Contract(address, ERC20Abi, provider).interface\n      const symbolFunction = erc20Interface.getFunction('symbol()')\n      const nameFunction = erc20Interface.getFunction('name()')\n      const decimalsFunction = erc20Interface.getFunction('decimals()')\n      const result = await multicall.aggregate([\n        [address, erc20Interface.encodeFunctionData(symbolFunction)],\n        [address, erc20Interface.encodeFunctionData(nameFunction)],\n        [address, erc20Interface.encodeFunctionData(decimalsFunction)]\n      ])\n      tokenData = {\n        symbol: erc20Interface.decodeFunctionResult(symbolFunction, result.returnData[0])[0],\n        name: erc20Interface.decodeFunctionResult(nameFunction, result.returnData[1])[0],\n        decimals: erc20Interface.decodeFunctionResult(decimalsFunction, result.returnData[2])[0]\n      }\n      TOKEN_DATA_CACHE[chainId][address] = tokenData\n    }\n    return new Token(chainId, address, tokenData.decimals, tokenData.symbol, tokenData.name)\n  }\n\n  /**\n   * Fetch on-chain, information on multiple given ERC20 token addresses, using the given ethers provider\n   * (or a default one if not provided). The results are cached for efficient subsequent accesses.\n   * @param chainId chain of the token\n   * @param addresses addresses of the tokens for which the data is needed\n   * @param provider provider used to fetch the token\n   */\n  public static async fetchMultipleTokensData(\n    chainId: ChainId,\n    addresses: string[],\n    provider: Provider = getDefaultProvider(getNetwork(chainId))\n  ): Promise<Token[]> {\n    const { previouslyCachedTokens, missingTokens } = addresses.reduce<{\n      previouslyCachedTokens: Token[]\n      missingTokens: string[]\n    }>(\n      (\n        accumulator: {\n          previouslyCachedTokens: Token[]\n          missingTokens: string[]\n        },\n        address: string,\n        _currentIndex: number,\n        _array: string[]\n      ): { previouslyCachedTokens: Token[]; missingTokens: string[] } => {\n        if (TOKEN_DATA_CACHE?.[chainId]?.[address]) {\n          const cachedToken = TOKEN_DATA_CACHE[chainId][address]\n          accumulator.previouslyCachedTokens.push(\n            new Token(chainId, address, cachedToken.decimals, cachedToken.symbol, cachedToken.name)\n          )\n        } else {\n          accumulator.missingTokens.push(address)\n        }\n        return accumulator\n      },\n      { previouslyCachedTokens: [], missingTokens: [] }\n    )\n    const tokenData = previouslyCachedTokens\n    if (missingTokens.length > 0) {\n      const erc20Interface = new Interface(ERC20Abi)\n      const getSymbolFunction = erc20Interface.getFunction('symbol()')\n      const getNameFunction = erc20Interface.getFunction('name()')\n      const getDecimalsFunction = erc20Interface.getFunction('decimals()')\n      const multicall = new Contract(PERMISSIVE_MULTICALL_ADDRESS[chainId], PERMISSIVE_MULTICALL_ABI, provider)\n      const aggregatedCalls = missingTokens.reduce<[string, string][]>(\n        (\n          accumulator: [string, string][],\n          address: string,\n          _currentIndex: number,\n          _array: string[]\n        ): [string, string][] => {\n          accumulator.push([address, erc20Interface.encodeFunctionData(getSymbolFunction)])\n          accumulator.push([address, erc20Interface.encodeFunctionData(getNameFunction)])\n          accumulator.push([address, erc20Interface.encodeFunctionData(getDecimalsFunction)])\n          return accumulator\n        },\n        []\n      )\n      const result = await multicall.aggregateWithPermissiveness(aggregatedCalls)\n      const returnData = result[1]\n      missingTokens.forEach((address: string, index: number) => {\n        const [wrappedSymbol, wrappedName, wrappedDecimals] = returnData.slice(index * 3, index * 3 + 3)\n        if (!wrappedSymbol.success || !wrappedName.success || !wrappedDecimals.success) {\n          console.warn(`could not fetch ERC20 data for address ${address}`)\n          return\n        }\n        try {\n          tokenData.push(\n            new Token(\n              chainId,\n              address,\n              erc20Interface.decodeFunctionResult(getDecimalsFunction, wrappedDecimals.data)[0],\n              erc20Interface.decodeFunctionResult(getSymbolFunction, wrappedSymbol.data)[0],\n              erc20Interface.decodeFunctionResult(getNameFunction, wrappedName.data)[0]\n            )\n          )\n        } catch (error) {\n          console.error(`error decoding ERC20 data for address ${address}`)\n        }\n      })\n    }\n    return tokenData\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId)),\n    platform: RoutablePlatform = RoutablePlatform.HONEYSWAP\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB, platform)\n    const [reserves0, reserves1] = await new Contract(address, IDXswapPair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    const tokenAmountA = new TokenAmount(tokenA, balances[0])\n    const tokenAmountB = new TokenAmount(tokenB, balances[1])\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    const liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, platform),\n      18,\n      'DXS',\n      'DXswap'\n    )\n    const swapFee = JSBI.BigInt(await new Contract(liquidityToken.address, IDXswapPair.abi, provider).swapFee())\n    const protocolFeeDenominator = JSBI.BigInt(\n      await new Contract(\n        FACTORY_ADDRESS[tokenAmountA.token.chainId],\n        IDXswapFactory.abi,\n        provider\n      ).protocolFeeDenominator()\n    )\n    return new Pair(tokenAmountA, tokenAmountB, swapFee, protocolFeeDenominator)\n  }\n\n  /**\n   * Fetches swap fee information from a liquidity token of a token pair\n   * @param liquidityToken the liquidity token from which the swap fee info will be fetched\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchSwapFee(\n    liquidityToken: Token,\n    provider = getDefaultProvider(getNetwork(liquidityToken.chainId))\n  ): Promise<{\n    fee: BigintIsh\n    owner: string\n  }> {\n    return {\n      fee: JSBI.BigInt(await new Contract(liquidityToken.address, IDXswapPair.abi, provider).swapFee()),\n      owner: await new Contract(FACTORY_ADDRESS[liquidityToken.chainId], IDXswapFactory.abi, provider).feeToSetter()\n    }\n  }\n\n  /**\n   * Fetches swap fee information from liquidity tokens of token pairs\n   * @param liquidityToken the liquidity tokens from which the swap fee info will be fetched\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchSwapFees(\n    liquidityTokens: Token[],\n    provider = getDefaultProvider(getNetwork(liquidityTokens[0].chainId))\n  ): Promise<\n    {\n      fee: BigintIsh\n      owner: string\n    }[]\n  > {\n    const multicall = new Contract(\n      PERMISSIVE_MULTICALL_ADDRESS[liquidityTokens[0].chainId],\n      PERMISSIVE_MULTICALL_ABI,\n      provider\n    )\n    const factoryContract = new Contract(FACTORY_ADDRESS[liquidityTokens[0].chainId], IDXswapFactory.abi, provider)\n    const liquidityTokenContract = new Contract(liquidityTokens[0].address, IDXswapPair.abi, provider)\n    let calls = []\n    calls.push({\n      address: factoryContract.address,\n      callData: factoryContract.interface.encodeFunctionData(factoryContract.interface.getFunction('feeToSetter()'))\n    })\n    for (let tokenPairsIndex = 0; tokenPairsIndex < liquidityTokens.length; tokenPairsIndex++) {\n      calls.push({\n        address: liquidityTokens[tokenPairsIndex].address,\n        callData: liquidityTokenContract.interface.encodeFunctionData(\n          liquidityTokenContract.interface.getFunction('swapFee()')\n        )\n      })\n    }\n    const result = await multicall.aggregate(calls.map(call => [call.address, call.callData]))\n    const owner = factoryContract.interface.decodeFunctionResult(\n      factoryContract.interface.getFunction('feeToSetter()'),\n      result.returnData[0]\n    )[0]\n    let fees = []\n    for (let resultIndex = 1; resultIndex < result.returnData.length; resultIndex++) {\n      fees.push({\n        fee: JSBI.BigInt(\n          liquidityTokenContract.interface.decodeFunctionResult(\n            liquidityTokenContract.interface.getFunction('swapFee()'),\n            result.returnData[resultIndex]\n          )[0]\n        ),\n        owner\n      })\n    }\n    return fees\n  }\n\n  /**\n   * Fetches swap fee information of all registered token pairs from factory\n   * @param chainId the chainId of the network to fecth the swap fees\n   * @param swapFeesCache a cache of already fetched fees to be skiped\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchAllSwapFees(\n    chainId: ChainId,\n    swapFeesCache: {\n      [key: string]: {\n        fee: BigintIsh\n        owner: string\n      }\n    } = {},\n    provider = getDefaultProvider(getNetwork(chainId))\n  ): Promise<{\n    [key: string]: {\n      fee: BigintIsh\n      owner: string\n    }\n  }> {\n    const multicall = new Contract(PERMISSIVE_MULTICALL_ADDRESS[chainId], PERMISSIVE_MULTICALL_ABI, provider)\n    const factoryContract = new Contract(FACTORY_ADDRESS[chainId], IDXswapFactory.abi, provider)\n    const allPairsLength = await factoryContract.allPairsLength()\n    let allSwapPairs: {\n      [key: string]: {\n        fee: BigintIsh\n        owner: string\n      }\n    } = {}\n\n    // Get first token pairs from cache\n    let tokenPairsCache = Object.keys(swapFeesCache)\n    let tokenPairsToFetch: Token[] = []\n    for (let tokenPaisCacheIndex = 0; tokenPaisCacheIndex < tokenPairsCache.length; tokenPaisCacheIndex++) {\n      allSwapPairs[tokenPairsCache[tokenPaisCacheIndex]] = {\n        fee: swapFeesCache[tokenPairsCache[tokenPaisCacheIndex]].fee,\n        owner: swapFeesCache[tokenPairsCache[tokenPaisCacheIndex]].owner\n      }\n    }\n\n    // Get rest of the token pairs that are not cached\n    let calls = []\n    for (let pairIndex = tokenPairsCache.length; pairIndex < allPairsLength; pairIndex++)\n      calls.push({\n        address: factoryContract.address,\n        callData: factoryContract.interface.encodeFunctionData(\n          factoryContract.interface.getFunction('allPairs(uint)'),\n          [pairIndex]\n        )\n      })\n    const result = await multicall.aggregate(calls.map(call => [call.address, call.callData]))\n    for (let resultIndex = 0; resultIndex < result.returnData.length; resultIndex++) {\n      const tokenPairAddress = factoryContract.interface.decodeFunctionResult(\n        factoryContract.interface.getFunction('allPairs(uint256)'),\n        result.returnData[resultIndex]\n      )[0]\n      tokenPairsToFetch.push(new Token(chainId, tokenPairAddress, 18, 'DXS', 'DXswap'))\n    }\n\n    // Fetch the pairs that we dont have the fee and owner\n    const swapFeesFetched = await this.fetchSwapFees(tokenPairsToFetch, provider)\n    for (let tokenPairsToFetchIndex = 0; tokenPairsToFetchIndex < tokenPairsToFetch.length; tokenPairsToFetchIndex++)\n      allSwapPairs[tokenPairsToFetch[tokenPairsToFetchIndex].address] = swapFeesFetched[tokenPairsToFetchIndex]\n    return allSwapPairs\n  }\n\n  /**\n   * Fetches protocol fee information from the token pair factory\n   * @param chainId the chainId of the network to fecth the protocol fee\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchProtocolFee(\n    chainId: ChainId,\n    provider = getDefaultProvider(getNetwork(chainId))\n  ): Promise<{\n    feeDenominator: BigintIsh\n    feeReceiver: string\n  }> {\n    const factoryContract = await new Contract(FACTORY_ADDRESS[chainId], IDXswapFactory.abi, provider)\n    const feeDenominator = await factoryContract.protocolFeeDenominator()\n    const feeReceiver = await factoryContract.feeTo()\n    return { feeDenominator, feeReceiver }\n  }\n\n  /**\n   * Fetches the default DXdao token list from the token registry scheme.\n   * @param chainId the chainId of the network to fecth the protocol fee\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchDxDaoTokenList(chainId: ChainId): Promise<TokenList> {\n    const tokenListUrl = new Map([\n      [1, 'https://tokens.coingecko.com/uniswap/all.json'],\n      [100, 'https://tokens.honeyswap.org'],\n      [137, 'https://tokens.honeyswap.org'],\n      [97, 'https://github.com/brijk20/DEX/blob/main/package.json'],\n      [80001, 'https://github.com/brijk20/DEX/blob/main/package.json'],\n      [43113, 'https://github.com/brijk20/DEX/blob/main/package.json']\n    ])\n\n    // const tokenRegistryContract = new Contract(TOKEN_REGISTRY_ADDRESS[chainId], TokenRegistryAbi, provider)\n    // const tokenAddresses = await tokenRegistryContract.getTokens(DXSWAP_TOKEN_LIST_ID[chainId])\n    // const tokens = await this.fetchMultipleTokensData(chainId, tokenAddresses, provider)\n\n    const chainTokenURL = tokenListUrl.get(chainId) ?? ''\n\n    const response = await fetch(chainTokenURL, {\n      method: 'GET',\n      headers: {\n        'content-type': 'application/json;charset=UTF-8'\n      }\n    })\n\n    const tokenList = []\n\n    if (!response.ok) {\n      return {\n        name: 'default token list',\n        tokens: []\n      }\n    }\n\n    const { tokens }: { tokens: TokenInfo[] } = await response.json()\n\n    if (tokens.length != 0) {\n      await this.fetchTokenLogoUri(chainId, tokens)\n    }\n\n    for (const token of tokens) {\n      if (token.chainId === chainId) {\n        tokenList.push({\n          chainId,\n          address: token.address,\n          name: token.name!,\n          decimals: token.decimals,\n          symbol: token.symbol!,\n          logoURI: token.logoURI\n        })\n      }\n    }\n\n    return {\n      name: 'swapr default token list',\n      tokens: tokenList\n    }\n  }\n\n  private static async fetchTokenLogoUri(tokenChainId: number, tokens: TokenInfo[]): Promise<void> {\n    const chainId = tokenChainId\n    if (chainId !== ChainId.MAINNET && chainId !== ChainId.XDAI && chainId !== ChainId.MATIC) {\n      return // token logos not fully supported for testnets\n    }\n\n    if (Object.keys(TOKEN_LOGO_URI_CACHE[chainId]).length === 0) {\n      await this.populateTokenLogoCache(chainId, tokens)\n    }\n    return\n  }\n\n  public static async checkTokenLogoCache(chainId: ChainId): Promise<void> {\n    if (chainId !== ChainId.MAINNET && chainId !== ChainId.XDAI && chainId !== ChainId.MATIC) {\n      return // token logos not fully supported for testnets\n    }\n    if (Object.keys(TOKEN_LOGO_URI_CACHE[chainId]).length === 0) {\n      // populate cache\n      await this.fetchDxDaoTokenList(chainId)\n      return\n    }\n    return\n  }\n\n  public static async populateTokenLogoCache(chainId: ChainId, tokens: TokenInfo[]): Promise<void> {\n    TOKEN_LOGO_URI_CACHE[chainId] = tokens.reduce((cache: { [tokenAddress: string]: string }, token) => {\n      cache[token.address.toLowerCase()] = token.logoURI\n      return cache\n    }, {})\n  }\n\n  public static getCachedTokenLogo(token: Token): string {\n    const { chainId } = token\n    if (chainId !== ChainId.MAINNET && chainId !== ChainId.XDAI && chainId !== ChainId.MATIC) {\n      return ''\n    }\n    return TOKEN_LOGO_URI_CACHE[chainId][token.address.toLowerCase()] || ''\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","SolidityType","FACTORY_ADDRESS","MAINNET","coreMainnet","factory","RINKEBY","coreRinkeby","ARBITRUM_TESTNET_V3","coreArbitrumTestnetV3","SOKOL","coreSokol","XDAI","coreXDai","MATIC","coreMatic","ROUTER_ADDRESS","peripheryRinkeby","router","peripheryMainnet","peripheryArbitrumTestnetV3","peripherySokol","peripheryXDai","peripheryMatic","tAVALANCHE","tMATIC","tBINANCE","STAKING_REWARDS_FACTORY_ADDRESS","TOKEN_REGISTRY_ADDRESS","DXSWAP_TOKEN_LIST_ID","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_25","SECONDS_IN_YEAR","_30","_100","_1000","_10000","defaultSwapFee","defaultProtocolFeeDenominator","SOLIDITY_TYPE_MAXIMA","uint8","uint256","PERMISSIVE_MULTICALL_ADDRESS","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_this","name","constructor","setPrototypeOf","prototype","_inheritsLoose","Error","InsufficientInputAmountError","_this2","Currency","decimals","symbol","this","isNative","currency","values","NATIVE_CURRENCY","indexOf","getNative","chainId","ETHER","SPOA","USD","Token","_proto","equals","other","sortsBefore","toLowerCase","getNativeWrapper","NATIVE_CURRENCY_WRAPPER","isNativeWrapper","token","currencyEquals","currencyA","currencyB","WETH","WSPOA","WXDAI","WMATIC","tWAVALANCHE","tWMATIC","tWBINANCE","DXD","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","amount","parsedAmount","exponentiate","nativeCurrency","usd","raw","toExact","TokenAmount","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","_Fraction","adjusted","RoutablePlatform","factoryAddress","routerAddress","initCodeHash","supportsChain","INITIAL_CACHE_STATE","PAIR_ADDRESS_CACHE","SWAPR","SUSHISWAP","UNISWAP","HONEYSWAP","BAOSWAP","QUICKSWAP","Pair","tokenAmountA","tokenAmountB","swapFee","protocolFeeDenominator","platform","liquidityMiningCampaigns","tokenAmounts","liquidityTokenAddress","liquidityToken","tokenA","tokenB","tokens","undefined","_PAIR_ADDRESS_CACHE2","_PAIR_ADDRESS_CACHE2$","_PAIR_ADDRESS_CACHE2$2","_PAIR_ADDRESS_CACHE2$3","_PAIR_ADDRESS_CACHE3","_PAIR_ADDRESS_CACHE3$","_PAIR_ADDRESS_CACHE3$2","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","exactQuote","slippage","amounts","Array","nextPairs","EXACT_INPUT","i","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","_ref$maxNumResults","maxNumResults","_ref$maxHops","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","_ref2$maxNumResults","_ref2$maxHops","tokenIn","isInsufficientReservesError","PricedTokenAmount","price","utils","parseUnits","MINIMUM_STAKED_AMOUNT_NATIVE_CURRENCY","LiquidityMiningCampaign","startsAt","endsAt","targetedPair","rewards","staked","locked","stakingCap","duration","now","Math","floor","Date","jsbiStartsAt","jsbiEndsAt","remainingDistributionPercentage","map","reward","remainingRewards","stakedValueNativeCurrency","nativeCurrencyAmount","yieldInPeriod","remainingRewardAmount","annualizationMultiplier","rawApy","PricedToken","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","args","to","recipient","allowedSlippage","deadline","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","TOKEN_DATA_CACHE","0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A","TOKEN_LOGO_URI_CACHE","Fetcher","fetchTokenData","provider","tokenData","getDefaultProvider","getNetwork","_TOKEN_DATA_CACHE$cha","multicall","Contract","PERMISSIVE_MULTICALL_ABI","erc20Interface","ERC20Abi","symbolFunction","getFunction","nameFunction","decimalsFunction","aggregate","encodeFunctionData","result","decodeFunctionResult","returnData","fetchMultipleTokensData","addresses","_currentIndex","_array","_TOKEN_DATA_CACHE$cha2","cachedToken","previouslyCachedTokens","missingTokens","Interface","getSymbolFunction","getNameFunction","getDecimalsFunction","aggregatedCalls","aggregateWithPermissiveness","forEach","index","wrappedSymbol","wrappedName","wrappedDecimals","success","data","console","warn","fetchPairData","IDXswapPair","abi","getReserves","reserves0","reserves1","balances","IDXswapFactory","fetchSwapFee","feeToSetter","fee","owner","fetchSwapFees","liquidityTokens","factoryContract","liquidityTokenContract","calls","callData","tokenPairsIndex","call","fees","resultIndex","fetchAllSwapFees","swapFeesCache","allPairsLength","allSwapPairs","tokenPairsCache","keys","tokenPairsToFetch","tokenPaisCacheIndex","pairIndex","tokenPairAddress","swapFeesFetched","tokenPairsToFetchIndex","fetchProtocolFee","feeDenominator","feeTo","feeReceiver","fetchDxDaoTokenList","chainTokenURL","Map","fetch","method","headers","content-type","response","tokenList","ok","json","logoURI","fetchTokenLogoUri","tokenChainId","_this3","populateTokenLogoCache","checkTokenLogoCache","_this4","cache","getCachedTokenLogo"],"mappings":"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"}